SELECT
    ABS(-5) COL1
    ,ABS(5) CO2
    ,FLOOR(10.5) COL3
    ,CEIL(10.5) COL4
    ,POWER(2,3) COL5
    ,SQRT(2) COL6
    ,ROUND(10.4) COL7
    ,ROUND(10.5) COL8
    ,TRUNC(10.4) COL9
    ,TRUNC(10.5) COL10
    ,TRUNC(11.5,-1) COL11
    ,ADD_MONTHS(TO_DATE('20180101','YYYYMMDD'),3) COL12
    ,CURRENT_DATE COL13
    ,EXTRACT(YEAR FROM SYSDATE) COL14
    ,EXTRACT(MONTH FROM SYSDATE) COL15
    ,EXTRACT(DAY FROM SYSDATE) COL16
    ,EXTRACT(DAY FROM LAST_DAY(TO_DATE('201803','YYYYMM'))) COL17
    ,NEXT_DAY('20180206',2) COL18
    ,NEXT_DAY('20180206','월') COL19
    ,SYSDATE COL20
    ,TRUNC(SYSDATE) COL21
FROM DUAL;

SELECT SYSDATE+ROWNUM-1 SDT
	,TRUNC(SYSDATE+ROWNUM-1,'D') TSTD     -- TRUNC(.'D')
	,DBMS_RANDOM.VALUE(1,ROWNUM) DS
	,TRUNC(DBMS_RANDOM.VALUE(1,ROWNUM)) DS1
	,TRUNC(DBMS_RANDOM.VALUE(1,ROWNUM),1) DS2   -- TRUNC(,1)
	,TRUNC(DBMX_RANDOM.VALUE(100,ROWNUM*100),-1) DS3  -- TRUNC(,-1)
FROM DUAL
CONNECT BY LEVEL <= 10;

-- 샘플
SELECT MIN(DECODE(D_ID, 1, YM)) YM
       ,SUM(DECODE(W_ID,1,D_ID)) 일
       ,MIN(DECODE(W_ID,2,D_ID)) 월
       ,MIN(DECODE(W_ID,3,D_ID)) 화
       ,MIN(DECODE(W_ID,4,D_ID)) 수
       ,MIN(DECODE(W_ID,5,D_ID)) 목
       ,MIN(DECODE(W_ID,6,D_ID)) 금
       ,MIN(DECODE(W_ID,7,D_ID)) 토
FROM (
    SELECT ROWNUM D_ID
           ,TO_CHAR(TO_DATE(:YM,'YYYYMM')) YM
           ,TO_CHAR(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') W_ID
           ,TRUNC(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') WK_ID
    FROM DUAL
    CONNECT BY LEVEL <= EXTRACT ( DAY FROM LAST_DAY(TO_DATE(:YM,'YYYYMM')))
)GROUP BY WK_ID
ORDER BY WK_ID;


SELECT ROWNUM D_ID
    FROM DUAL
    CONNECT BY LEVEL <= EXTRACT ( DAY FROM LAST_DAY(TO_DATE(:YM,'YYYYMM')));

SELECT TO_CHAR(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') W_ID FROM DUAL;
SELECT TO_CHAR(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') W_ID FROM DUAL;

SELECT 
    MAX(DECODE(DID,1,YMD)) MONTH,
    MIN(DECODE(WID,1,DID)) SUN,
    MIN(DECODE(WID,2,DID)) MON,
    MIN(DECODE(WID,3,DID)) TUE,
    MIN(DECODE(WID,4,DID)) WED,
    MIN(DECODE(WID,5,DID)) THU,
    MIN(DECODE(WID,6,DID)) FRI,
    MIN(DECODE(WID,7,DID)) SAT
FROM (
    SELECT
    TO_CHAR(T1, 'YYYY-MM') YMD,
    EXTRACT(DAY FROM T1) DID,
    TO_CHAR(T1,'D') WID,
    TRUNC(T1,'D') WKID,
    TO_CHAR(T1,'YYYY-MM') MONTH
    
    FROM(
        SELECT
            SYM + NO T1,
            EXTRACT(DAY FROM TO_DATE(:SM, 'YYYYMM' + ROWNUM -1) DID,
            TO_CHAR(TO_DATE(:SM,'YYYYMM'+ROWNUM -1, 'D') WID
            FROM 
    )
);

-- 2/24 연습
-- 중첩 SELECT 3가지
-- INLINE VIEW : FROM 절 안에 SELECT문이 있는 경우 
SELECT * 
FROM (
    SELECT NAME
           ,CLASS
           ,KOR+ENG+MAT TOT
    FROM EXAM_RSLT
);

SELECT *
FROM EXAM_RSLT;

SELECT NAME
       ,CLASS
       ,KOR+ENG+MAT TOT
FROM EXAM_RSLT;
-- Q1: SELECT할 때 조건을 주는거랑 FROM절 안에서 주는 거랑 결과가
--    같은데 인라인뷰를 쓰는 것만의 이점이 있는지

-- SCALAR SUBQUERY
SELECT NAME
      ,CLASS
      ,GRADE
      ,ROUND((KOR+ENG+MAT)/3,1) AVG
      ,( SELECT GRADE
         FROM COURSE_CREDITS
         WHERE (KOR+ENG+MAT)/3 BETWEEN ST_RNG AND ET_RNG
       ) VAL
FROM EXAM_RSLT;

SELECT *
FROM COURSE_CREDITS;

-- SUBQUERY : WHERE절 안에 SELECT문이 들어가 있는 경우
SELECT *
FROM EXAM_RSLT;
WHERE GRADE IN( SELECT ROWNUM NO
                FROM DUAL
                CONNECT BY LEVEL <= 2;       
              );

-- 숫자함수
SELECT
    ABS(-5) COL1
    ,ABS(5) COL2
    ,FLOOR(10.5) COL3
    ,CEIL(10.5) COL4
    ,POWER(2,3) COL5
    ,SQRT(9) COL6
    ,ROUND(10.4) COL7
    ,ROUND(10.5) COL8
    ,ROUND(10.5, -2) COL8_1
    ,TRUNC(10.4) COL9
    ,TRUNC(10.5) COL10
    ,TRUNC(11.5,-1) COLL11
    ,ADD_MONTHS(TO_DATE('20180101','YYYYMMDD'),3) COL12
    ,CURRENT_DATE COL13
    ,EXTRACT(YEAR FROM SYSDATE) COL14
    ,EXTRACT(MONTH FROM SYSDATE) COL15
    ,EXTRACT(DAY FROM SYSDATE) COL16
    ,EXTRACT(DAY FROM LAST_DAY(TO_DATE('201803','YYYYMM'))) COL17
    ,NEXT_DAY('20180206',2) COL18
    ,NEXT_DAY('20180206','월') COL19
    ,SYSDATE COL20
    ,TRUNC(SYSDATE) COL21
FROM DUAL;

SELECT SYSTIMESTAMP ST
    ,TO_CHAR(SYSTIMESTAMP,'YYYY/MM/DD HH24:MI:SS') CST
    ,EXTRACT(YEAR FROM SYSDATE) Y
    ,EXTRACT(MONTH FROM SYSDATE) MM
    ,EXTRACT(DAY FROM SYSDATE) D
    ,EXTRACT(HOUR FROM SYSTIMESTAMP) T1
    ,EXTRACT(HOUR FROM SYSTIMESTAMP) +9 T2
    ,EXTRACT(HOUR FROM SYSTIMESTAMP) + EXTRACT(TIMEZONE_HOUR FROM SYSTIMESTAMP) T3
    ,EXTRACT(TIMEZONE_HOUR FROM SYSTIMESTAMP) T3_1
    ,EXTRACT(MINUTE FROM SYSTIMESTAMP) M
    ,EXTRACT(SECOND FROM SYSTIMESTAMP) S
FROM DUAL;

SELECT EXTRACT(YEAR FROM LAST_DAY
                    (ADD_MONTHS(TO_DATE(:V_YMD,'YYYYMMDD'),ROWNUM-1))) Y
      ,EXTRACT(MONTH FROM LAST_DAY
                    (ADD_MONTHS(TO_DATE(:V_YMD,'YYYYMMDD'),ROWNUM-1))) M
      ,EXTRACT(DAY FROM LAST_DAY
                   (ADD_MONTHS(TO_DATE(:V_YMD,'YYYYMMDD'),ROWNUM-1))) D
FROM DUAL
CONNECT BY LEVEL <= :ARGYCNT*12;
-- 곱하기 12하면 달 수 * 12해서 1년이 나오니까 이걸 안 곱하고 그냥 달로 처리하면..!

-- 시간, 날짜 관련 함수
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') COL1
      ,TO_CHAR(TRUNC(SYSDATE),'YYYY-MM-DD') COL2
      ,TO_CHAR(TRUNC(SYSTIMESTAMP),'YYYY-MM-DD') COL2_1
      ,TO_CHAR(ROUND(SYSDATE),'YYYY-MM-DD') COL3
      ,TO_CHAR(SYSDATE,'DAY') COL4
      ,TO_CHAR(SYSDATE, 'MON') COL5
      ,TO_CHAR(SYSDATE, 'YEAR') COL6
      ,SYSDATE COL7
      ,SYSDATE + 5/(24*60*60) COL8
      ,SYSDATE +5*60/(24*60*60) COL9
      ,SYSDATE + 5 COL10
      ,ADD_MONTHS(SYSDATE,-3) COL11
      ,ADD_MONTHS(SYSDATE,3) COL12
      ,SYSDATE - TO_DATE('2022-02-01','YYYY-MM-DD') COL13
      ,MONTHS_BETWEEN(SYSDATE, TO_DATE('2021-05-30','YYYY-MM-DD')) COL15
      ,LAST_DAY(SYSDATE) COL16
      ,TO_CHAR(SYSDATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COL17
FROM DUAL;


-- 답 찾기
SELECT MIN(DECODE(D_ID, 1, YM_ID)) YM
       ,SUM(DECODE(W_ID,1,D_ID)) 일
       ,MIN(DECODE(W_ID,2,D_ID)) 월
       ,MIN(DECODE(W_ID,3,D_ID)) 화
       ,MIN(DECODE(W_ID,4,D_ID)) 수
       ,MIN(DECODE(W_ID,5,D_ID)) 목
       ,MIN(DECODE(W_ID,6,D_ID)) 금
       ,MIN(DECODE(W_ID,7,D_ID)) 토
FROM (
    SELECT EXTRACT( DAY FROM TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1) D_ID
           ,TO_CHAR(TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1,'YYYY-MM') YM_ID
           ,TO_CHAR(TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1,'D') W_ID
           ,TRUNC(TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1,'D') WK_ID
    FROM DUAL
    CONNECT BY LEVEL <= LAST_DAY(TO_DATE(:EYM,'YYYYMM')) - TO_DATE(:SYM,'YYYYMM') + 1
    )
GROUP BY YM_ID,WK_ID
ORDER BY WK_ID,YM_ID;


SELECT LAST_DAY(TO_DATE(:EYM,'YYYYMM')) - TO_DATE(:SYM,'YYYYMM')
FROM DUAL;

SELECT ROWNUM D_ID
--       ,TO_CHAR(TO_DATE(:YM,'YYYYMM')) YM
--       ,TO_CHAR(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') W_ID
--       ,TRUNC(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') WK_ID
FROM DUAL
CONNECT BY LEVEL <= EXTRACT ( DAY FROM LAST_DAY(TO_DATE(:EYM,'YYYYMM')) - TO_DATE(:SYM,'YYYYMM'));



-- 일자 구하는 법 TO_DATE(:YM,'YYYYMM') + ROWNUM-1

SELECT EXTRACT(DAY FROM TO_DATE(:SYM,'YYYYMM')) D_ID
      -- ,TO_CHAR(TO_DATE(:YM,'YYYYMM')) YM
     --  ,TO_CHAR(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') W_ID
     --  ,TRUNC(TO_DATE(:YM,'YYYYMM') + ROWNUM-1,'D') WK_ID
FROM DUAL;
--CONNECT BY LEVEL <= EXTRACT ( DAY FROM LAST_DAY(TO_DATE(:YM,'YYYYMM')));


-- 2/25(수)
-- 뷰 만들기
CREATE VIEW V_EXAM AS
SELECT NAME
       ,CLASS
       ,GRADE
       ,KOR+ENG+MAT TOT
FROM EXAM_RSLT;

-- 사용하는 방법 
-- 1. 직접 SQL로 호출
-- 2. V_EXAM 을 호출하는 방법

CREATE VIEW V_EXAM1 AS
SELECT NAME
       ,CLASS
       ,GRADE
       ,KOR+ENG+MAT TOT
FROM EXAM_RSLT
WHERE GRADE = :V_VAL;
-- 바인드 변수가 포함된 것은 뷰로 만들 수 없다. 

CREATE VIEW V_EXAM1 AS
SELECT * 
FROM DUAL;
/*SELECT NAME
       ,CLASS
       ,GRADE
       ,KOR+ENG+MAT TOT
FROM EXAM_RSLT
WHERE GRADE = :V_VAL;*/
-- 바인드 변수를 사용할 때에는 주석으로 막아서 저장해두면 된다. 

CREATE VIEW YYW_HW1_20220225 AS
SELECT *
FROM DUAL
/*SELECT MIN(DECODE(D_ID, 1, YM_ID)) YM
       ,SUM(DECODE(W_ID,1,D_ID)) 일
       ,MIN(DECODE(W_ID,2,D_ID)) 월
       ,MIN(DECODE(W_ID,3,D_ID)) 화
       ,MIN(DECODE(W_ID,4,D_ID)) 수
       ,MIN(DECODE(W_ID,5,D_ID)) 목
       ,MIN(DECODE(W_ID,6,D_ID)) 금
       ,MIN(DECODE(W_ID,7,D_ID)) 토
FROM (
    SELECT EXTRACT( DAY FROM TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1) D_ID
           ,TO_CHAR(TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1,'YYYY-MM') YM_ID
           ,TO_CHAR(TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1,'D') W_ID
           ,TRUNC(TO_DATE(:SYM,'YYYYMM') + ROWNUM - 1,'D') WK_ID
    FROM DUAL
    CONNECT BY LEVEL <= LAST_DAY(TO_DATE(:EYM,'YYYYMM')) - TO_DATE(:SYM,'YYYYMM') + 1
    )
GROUP BY YM_ID,WK_ID
ORDER BY WK_ID,YM_ID;*/

SELECT SUM(EV)
      ,SUM(OD)
FROM(
    SELECT 
           ROWNUM NO
          ,(, ROWNUM - 1) EV
          ,(, ROWNUM - 1) OD

    FROM DUAL
    CONNECT BY LEVEL <= 11;
);

SELECT '0'||'~'||'10' EV
       ,SUM(DECODE(DIV,0,NO)) EV_SUM
       ,'1'||'~'||'9'OD 
       ,SUM(DECODE(DIV,1,NO)) OD_SUM
FROM(
    SELECT ROWNUM - 1 NO
           ,MOD(ROWNUM - 1,2) DIV

    FROM DUAL
    CONNECT BY LEVEL <= 11
    );

-- 함수 실습
SELECT ASCII('A')
FROM DUAL;

SELECT ASCII('B')
FROM DUAL;

SELECT ASCII('A'),CHR(65)
FROM DUAL;

SELECT CHR(ROWNUM + 64 )
       ,ASCII(ROWNUM +64)
FROM DUAL
CONNECT BY LEVEL <=26;

SELECT CONCAT('A','B')
      -- ,CONCAT('A','B','C') 에러
       ,'A'||'B'
FROM DUAL;

-- GREATEST : ROW에서 가장 작은 값을 구하는
-- 23P
SELECT A.*, GREATEST(KOR,ENG,MAT), LEAST(KOR,ENG,MAT)
FROM EXAM_RSLT A;

-- 수학 집합 연산
-- UNION ALL
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=5
UNION ALL
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=3;

-- UNION 
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=5
UNION
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=3;

-- UNION ALL, UINON : 컬럼의 타입과 개수가 같아야 연산이 가능하다

-- MINUS
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=5
MINUS
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=3;

-- 똑같은 집합인지 알고 싶을 때에는 순서를 앞뒤 바꿔서 연산을 해도 두 개가 다 NULL이 나와야 한다. 
-- 아주 긴 SQL의 결과가 같은 건지 아닌지 검증하고 싶을 때에는 서로 2번 빼보면 된다. 
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=5
MINUS
SELECT ROWNUM+3 NO
FROM DUAL
CONNECT BY LEVEL <=2;

-- INTERSECTION : 교집합
SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <=5
INTERSECT
SELECT ROWNUM+3 NO
FROM DUAL
CONNECT BY LEVEL <=2;


SELECT INITCAP('asdfa sdfa sf')
FROM DUAL;

-- INSTR('문자열','찾을 문자',방향,번째) : 문자의 자릿수 
SELECT INSTR('ASFASFE','S',1,2)
FROM DUAL;

SELECT INSTR('ASFASFE','A',-1,2)
FROM DUAL;

-- SUBSTR('문자열',-부터 시작,
SELECT SUBSTR('ASFASFE',2,2)
       ,SUBSTR('ASFASFE',-2,4)
FROM DUAL;

-- LENGTH : 글자수 / LENGTHB : 바이트 수 (한글을 두 바이트) 
SELECT LENGTH('ADS')
       ,LENGTHB('ABC')
       ,LENGTH('서울시')
       ,LENGTHB('서울시')
FROM DUAL;

SELECT LOWER('AFdsdfA')
FROM DUAL;

SELECT LPAD('*',ROWNUM,'$')
FROM DUAL
CONNECT BY LEVEL <= 5;

SELECT LPAD('#$',ROWNUM,'$')
FROM DUAL
CONNECT BY LEVEL <= 5;

SELECT RPAD('*',ROWNUM,'$')
FROM DUAL
CONNECT BY LEVEL <= 5;

SELECT '*'||TRIM('    DAFA ')
FROM DUAL;

SELECT '*'||'    DAFA              '||'*'
       ,'*'||TRIM('    DAFA              ')||'*'
       ,'*'||LTRIM('    DAFA              ')||'*'
       ,'*'||RTRIM('    DAFA              ')||'*'
       ,'*'||LTRIM('----DAFA----','-')||'*'
       ,'*'||RTRIM('----DAFA----','-')||'*'
       -- ,'*'||TRIM('----DAFA----','-')||'*' 불가능
FROM DUAL;

-- REPLACE는 문자열 전체를 치환, TRANSLATE는 문자 각각을 치환
SELECT REPLACE('DSAFXAFDA','A','*@')
       ,TRANSLATE('DSAFXAFDA','A','*@')
FROM DUAL;

-- TEST1
SELECT REPLACE('a1b2c4','a1*','BC') FROM DUAL
UNION ALL
SELECT TRANSLATE('a1b2c4','a1*','BC') FROM DUAL;

--- TEST2
SELECT REPLACE('a1b2c4*','a1*','BCD') FROM DUAL
UNION ALL
SELECT TRANSLATE('a1b2c4*','a1*','BCD') FROM DUAL;

SELECT VAR_PHONE ORG_STR
      ,TRANSLATE(VAR_PHONE,'0123456789','*') AFT_STR1
      ,TRANSLATE(VAR_PHONE, '123456789'||VAR_PHONE,'123456789') AFT_STR1_1
      ,TRANSLATE(VAR_PHONE,'12345','@#$%&') AFT_STR2
      ,TRANSLATE(VAR_PHONE, '123','ABC') AFT_STR2_1
FROM (
SELECT '안9녕8하7세6요5 4H3 2입1니0다' AS VAR_PHONE
FROM DUAL);

SELECT TRANSLATE(STR, '123'||STR ,'123')
FROM(
SELECT 'K2O1R3EA' STR
FROM DUAL);

SELECT TRANSLATE('K2O1R3EA','123K2O1R3EA','123')
FROM(
SELECT 'K2O1R3EA' STR
FROM DUAL);

SELECT TRANSLATE(VAR_PHONE,'다니입 H요세하녕안'||VAR_PHONE,'다니입 H요세하녕안')
FROM(
    SELECT '안9녕8하7세6요5 4H3 2입1니0다' VAR_PHONE
    FROM DUAL);

-- TRANSLATE 예제
--입력값 : AXNFGKNC
--출력값 : @XN@G@NC
--
--변환대상 입력 : AFK
--변환 패턴 입력 : @
--> AFK가 모두 @로 변환되면 되는 것
--
--조건
--SELECT ?
--FROM DUAL;

SELECT TRANSLATE(:STR, :PAR, :CH)
FROM DUAL;

-- 3/2 (수) p20
-- 정규식 : 데이터를 가지고 찾는게 아니라, 패턴을 가지고 찾는 방식

-- . : 좌측에서부터 글자 점의 개수만큼 찾기
SELECT REGEXP_SUBSTR('DASF123AFDA','.')
FROM DUAL;

SELECT REGEXP_SUBSTR('DASF123AFDA','..')
FROM DUAL;

-- .+ : 최소 한 개, 최대 무한대
SELECT REGEXP_SUBSTR('DASF123AFDA','.+')
FROM DUAL;

-- ? : 최소 0개, 최대 1개
SELECT REGEXP_SUBSTR('D','..?')
FROM DUAL;

-- * : 0개 이상
SELECT REGEXP_SUBSTR('DASF123AFDA','..*')
FROM DUAL;

SELECT REGEXP_SUBSTR('D','..*')
FROM DUAL;

-- { }
SELECT REGEXP_SUBSTR('DASF123AFDA','.{3}')
FROM DUAL;

SELECT REGEXP_SUBSTR('DASF123AFDA','.{3,}')
FROM DUAL;

-- 최소 3개, 최대 4개. 최대에 매칭됨
SELECT REGEXP_SUBSTR('DASF123AFDA','.{3,4}')
FROM DUAL;

-- [] : D나 A 중 아무거나 한 글자만 찾아달라
SELECT REGEXP_SUBSTR('DASF123AFDA','[DA]')
FROM DUAL;

SELECT REGEXP_SUBSTR('ASF123AFDA','[DA]')
FROM DUAL;

-- [^] : D나 A만 빼고 아무거나 하나 찾아달라
SELECT REGEXP_SUBSTR('DASF123AFDA','[^DA]')
FROM DUAL;

-- ^[] : D나 A로 시작하라
SELECT REGEXP_SUBSTR('DASF123AFDA','^[DA]')
FROM DUAL;

-- $ : ~FH rmXSKFK
SELECT REGEXP_SUBSTR('FDA','..A$')
FROM DUAL;

--\와 + 묶어서 사용하여 원하는 패턴 찾기
SELECT REGEXP_SUBSTR('XA12-34-5678sdSX','(\d+-)+\d+')
FROM DUAL;

-- ESCAPE 문자 사용(메타 캐릭터 의미 제외하기)
SELECT REGEXP_SUBSTR('XA..$12-34-5678sdSX','\.+')
FROM DUAL;

SELECT REGEXP_SUBSTR('XA..A$78sdSX','.A\$')
FROM DUAL;

-- [] : 글자 수
SELECT REGEXP_SUBSTR('ADSFA12341FD','[0-9]')
FROM DUAL;

SELECT REGEXP_SUBSTR('ADSFA12341FD','[0-9]+')
FROM DUAL;

SELECT REGEXP_SUBSTR('ADSFA12341FD','[[:digit:]]+')
FROM DUAL;

SELECT REGEXP_SUBSTR('ADSdd12341FD','[[:upper:]]+')
FROM DUAL;

SELECT REGEXP_SUBSTR('ADSdd12341FD','[[:lower:]]+')
FROM DUAL;

SELECT REGEXP_SUBSTR('A      DSdd12 341FD','[[:space:]]+.+')
FROM DUAL;

-- SPACE가 여러개인 것을 하나로 바꾸는 법
SELECT REGEXP_REPLACE('A      DSdd12            341FD','[[:space:]]{2,}',' ')
FROM DUAL;

-- 한글만 뽑기 예제1
SELECT REGEXP_SUBSTR('DFAF3543DF대한민국FAF353AS서울 영등포12DAFSXYT','[가-힝]+',1,ROWNUM) STR
FROM DUAL
CONNECT BY LEVEL <= REGEXP_COUNT('DFAF3543DF대한민국FAF353AS서울 영등포12DAFSXYT','[가-힝]+');

-- 한글만 뽑기 예제2
SELECT LISTAGG(REGEXP_SUBSTR('DFAF3543DF대한민국FAF353AS서울 영등포12DA아프리카FSXYT','[가-힝]+',1,ROWNUM),'')
       WITHIN GROUP( ORDER BY ROWNUM ) STR
FROM DUAL
CONNECT BY LEVEL <= REGEXP_COUNT('DFAF3543DF대한민국FAF353AS서울 영등포12DA아프리카FSXYT','[가-힝]+');

-- 한글만 빼기 예제
SELECT REGEXP_SUBSTR('DFAF3543DF대한민국FAF353AS서울 영등포12DAFSXYT','[^가-힝]+',1,ROWNUM) STR
FROM DUAL
CONNECT BY LEVEL <= REGEXP_COUNT('DFAF3543DF대한민국FAF353AS서울 영등포12DAFSXYT','[^가-힝]+');

SELECT REGEXP_SUBSTR(VAR_STR, '[^,]+',1,ROWNUM)
FROM(
SELECT '홍길동,김깅동,박길동,1233,456' VAR_STR
FROM DUAL)
CONNECT BY LEVEL <= REGEXP_COUNT(VAR_STR,'[^,]+');

SELECT lISTAGG(REGEXP_SUBSTR(VAR_STR, '[^,]+',1,ROWNUM)) WITHIN GROUP(ORDER BY ROWNUM)
FROM(
SELECT '홍길동,김깅동,박길동,1233,456' VAR_STR
FROM DUAL)
CONNECT BY LEVEL <= REGEXP_COUNT(VAR_STR,'[^,]+');

SELECT REGEXP_SUBSTR(VAR_STR, '[^,]+',1,1) C1
       ,REGEXP_SUBSTR(VAR_STR, '[^,]+',1,2) C2
       ,REGEXP_SUBSTR(VAR_STR, '[^,]+',1,3) C3
       ,REGEXP_SUBSTR(VAR_STR, '[^,]+',1,4) C4
       ,REGEXP_SUBSTR(VAR_STR, '[^,]+',1,5) C5
FROM(
SELECT '홍길동,김깅동,박길동,1233,456' VAR_STR
FROM DUAL);

SELECT REGEXP_SUBSTR('82CADS1FASDFDFDFDCD0FDFD0','S?F',1,1) A
      ,REGEXP_SUBSTR('82CADS1FASDFDFDFDCD0FDFD0','S?F',1,2) A_1
      -- ? : 앞에 문자가 있을 수도, 없을 수도 있을 때 사용
      ,REGEXP_INSTR('82CADS1FASDFDFDFDCD0FDFD0','S?F',1,1) B
      ,REGEXP_INSTR('82CADS1FASDFDFDFDCD0FDFD0','S?F',1,3) B_1
FROM DUAL;

-- 주민번호 오류 검증
-- 입력 : 주민번호
-- 출력 : 맞다 OR 틀리다
-- 검증값 : 검증코드 출력

SELECT SUM(REGEXP_SUBSTR((:NUM),'[0-9]',ROWNUM) * REGEXP_SUBSTR('234567892345','[0-9]', ROWNUM))
FROM (
      SELECT REGEXP_SUBSTR((:NUM),'[0-9]',ROWNUM) PNUM
              ,REGEXP_SUBSTR('234567892345','[0-9]', ROWNUM) CHECK_NUM
              ,REGEXP_SUBSTR((:NUM),'[0-9]',ROWNUM) * REGEXP_SUBSTR('234567892345','[0-9]', ROWNUM) RESULT_
       FROM DUAL
       CONNECT BY LEVEL <= 12;
    );
    
    
-- 답
SELECT DECODE(SUBSTR(:V_JUMIN,-1)
       ,SUBSTR(11- MOD(SUM(SUBSTR(REPLACE(:V_JUMIN,'-'),ROWNUM,1) * SUBSTR('234567892345',ROWNUM,1),11),-1)),'맞음','틀림') JSUM
       ,SUBSTR(:V_JUMIN,-1) CHK_DGT
       ,11- MOD(SUM(SUBSTR(REPLACE(:V_JUMIN,'-'),ROWNUM,1) * SUBSTR('234567892345',ROWNUM,1),11),-1) CALC_BIT
FROM DUAL
CONNECT BY LEVEL <= LENGTH(REPLACE(:V_JUMIN,'-'));


    
-- 개인별 최고 점수를 얻은 과목과 점수는?
SELECT NM ,SUBSTR(MAX(LPAD(SCORE,3,'0')||SUBJECT),4) 과목명 ,MAX(SCORE) 최고점수
FROM STD_SCORE
GROUP BY NM;

SELECT NM , REGEXP_SUBSTR(MAX(SCORE||SUBJECT),'[A-Z]+') ,MAX(SCORE)
FROM STD_SCORE
GROUP BY NM;

SELECT NM,REGEXP_SUBSTR(MAX(SCORE||SUBJECT), '[^0-9]+'), MAX(SCORE)
FROM STD_SCORE
GROUP BY NM;

SELECT NM , REGEXP_SUBSTR(MAX(SCORE||SUBJECT),'[A-Z]+') ,MAX(SCORE)
FROM STD_SCORE
GROUP BY NM;

CREATE VIEW V_YYW_20220304_HW1 AS
SELECT * 
FROM DUAL
/*SELECT NM,REGEXP_SUBSTR(MAX(SCORE||SUBJECT), '[^0-9]+'), MAX(SCORE)
FROM STD_SCORE
GROUP BY NM;*/
;

CREATE VIEW V_YYW_20220304_HW2 AS
SELECT * 
FROM DUAL
/*SELECT RNUM SEQ 
       ,LPAD('*',RNUM,'*') T1
       ,LPAD('A',RNUM,'B') T2
       ,DECODE(SIGN(RNUM-5),1,6-((RNUM-4)),RNUM) AS DSEQ
       ,LPAD('*',DECODE(SIGN(RNUM-5),1,6-((RNUM -4)),RNUM),'*') DFTST
       ,CASE WHEN RNUM -5 >= 1 THEN 6-((RNUM - 4))
       ELSE RNUM
       END AS CSEQ
       ,LPAD('*',CASE WHEN RNUM -5 >= 1 THEN 6-((RNUM -4))
                ELSE RNUM
                END
            ,'*') CFTST
       ,'A'||RPAD('BCDEFGHIJKLMNOPQRSTUVWXYZ',RNUM,REGEXP_SUBSTR('BCDEFGHIJKLMNOPQRSTUVWXYZ','[A-Z]',ROWNUM)) T4
       --RPAD(값, 총 문자 길이, 채움 문자)
FROM ( SELECT ROWNUM RNUM
       FROM USER_TAB_COLUMNS
       WHERE ROWNUM < 10
       ORDER BY RNUM ASC
    );*/
;

CREATE VIEW V_YYW_20220304_HW3 AS
SELECT * 
FROM DUAL
/*SELECT 
    NM
    ,SUBJECT
    ,SCORE
    ,GRADE
    ,ST_RNG
    ,ET_RNG
FROM STD_SCORE JOIN COURSE_CREDITS
ON SCORE BETWEEN ST_RNG AND ET_RNG
ORDER BY NM ASC;*/
;

-- 3월 2일 (수) 숙제
-- 1. 최고 점수

SELECT NM,REGEXP_SUBSTR(MAX(SCORE||SUBJECT), '[^0-9]+'), MAX(SCORE)
FROM STD_SCORE
GROUP BY NM;

-- 2. P30
SELECT RNUM SEQ 
       ,LPAD('*',RNUM,'*') T1
       ,LPAD('A',RNUM,'B') T2
       ,DECODE(SIGN(RNUM-5),1,6-((RNUM-4)),RNUM) AS DSEQ
       ,LPAD('*',DECODE(SIGN(RNUM-5),1,6-((RNUM -4)),RNUM),'*') DFTST
       ,CASE WHEN RNUM -5 >= 1 THEN 6-((RNUM - 4))
       ELSE RNUM
       END AS CSEQ
       ,LPAD('*',CASE WHEN RNUM -5 >= 1 THEN 6-((RNUM -4))
                ELSE RNUM
                END
            ,'*') CFTST
       ,'A'||RPAD('BCDEFGHIJKLMNOPQRSTUVWXYZ',RNUM,REGEXP_SUBSTR('BCDEFGHIJKLMNOPQRSTUVWXYZ','[A-Z]',ROWNUM)) T4
       --RPAD(값, 총 문자 길이, 채움 문자)
FROM ( SELECT ROWNUM RNUM
       FROM USER_TAB_COLUMNS
       WHERE ROWNUM < 10
       ORDER BY RNUM ASC
    );


-- 3. JOIN
-- 1) JOIN을 이용해서 결과 내기 
-- 답
SELECT 
    NM
    ,SUBJECT
    ,SCORE
    ,GRADE
    ,ST_RNG
    ,ET_RNG
FROM STD_SCORE JOIN COURSE_CREDITS
ON SCORE BETWEEN ST_RNG AND ET_RNG
ORDER BY NM ASC;

-- ANSCI JOIN
CREATE TABLE TA1 AS
SELECT ROWNUM *10 ID
FROM DUAL
CONNECT BY LEVEL <=5;

DROP TABLE TA2;

SELECT * FROM TA1;

CREATE TABLE TA2 AS
SELECT ROWNUM *10 ID
FROM DUAL
CONNECT BY LEVEL <=3;

SELECT TA1.*,TA2.*
FROM TA1 LEFT OUTER JOIN TA2
ON TA1.ID = TA2.ID
AND TA1.ID < 40;


-- 2) 왜 STD SCORE만큼 결과가 나오는지
-- join은 곱하기이기 때문에. 1대M일 때에 건수는 M이 나오게 된다. 
-- 여기에서는 course_credits의 grade가 pk로 1이고, std_score의 갯수가 fk로 m이기 때문에 

-- 겹치는 구간이 생기면 건수가 늘어난다. 

-- 3) COURSE_CREDITS를 어떻게 바꾸면 건수가 늘어나는지
-- GRADE에 PASS / FAIL 조건을 추가했다.
INSERT INTO COURSE_CREDITS(GRADE, ST_RNG, ET_RNG) VALUES('P',71,100);
INSERT INTO COURSE_CREDITS(GRADE, ST_RNG, ET_RNG) VALUES('R',0,70);



-- 4. CASE와 DECODE의 차이
-- 공통점 : 조건을 비교할 때 사용한다. 

-- 차이점 
-- 1) 용법
-- DECODE(VALUE, COND1, THEN1, CODNE2, THEN2 ...)

--CASE
--	WHEN CONDITION 1 THEN VALUE 1
--	WHEN CONDITION 2 THEN VALUE 2
--		...
--	ELSE VALUE3
--END

-- 2) CASE 문에서는 WHEN 이후에 다양한 비교 조건문을 작성할 수 있지만 DECODE는 조건값과 같은지 여부만 판별 가능하다. 

-- 3) NULL
-- DECODE : NULL의 값이 NULL과 같으면 1, 아니면 0  => 결과 1
-- CASE : NULL과 NULL을 비교하면 FALSE 반환
SELECT DECODE(NULL, NULL, 1, 0) AS DECODE_NULL,
      CASE NULL
          WHEN NULL THEN 1
          ELSE 0
       END AS CASE_NULL_1,
       CASE 
           WHEN NULL IS NULL THEN 1
           ELSE 0
        END AS CASE_NULL_2
FROM DUAL;

-- 4) DECODE는 오라클이 제공하는 비교 함수이기 때문에 다른 SQL에서 사용 불가
--    CASE는 표준SQL이기 때문에 어느 SQL에서나 사용 가능


--3월 4일 (금)
-- 3.3 SQL 함수 활용1
SELECT ROWNUM
       ,LPAD('*',DECODE(SIGN(CNT/2 - ROWNUM),-1,CNT-ROWNUM,ROWNUM),'*')
       ,CNT
FROM (
SELECT DECODE(MOD(:V_CNT,2),1,:V_CNT+1,:V_CNT) CNT
FROM DUAL
CONNECT BY LEVEL < CASE WHEN :V_CNT < 4 THEN 4 ELSE  DECODE(MOD(:V_CNT,2),1,:V_CNT+1,:V_CNT) END
);



SELECT ROWNUM
       ,LPAD('*',DECODE(SIGN(CNT/2 - ROWNUM),-1,CNT-ROWNUM,ROWNUM),'*')
       ,CNT
FROM (
SELECT CASE WHEN :V_CNT < 10 THEN 10 ELSE TRUNC(:V_CNT,-1) END CNT
FROM DUAL
CONNECT BY LEVEL < CASE WHEN :V_CNT < 10 THEN 10 ELSE TRUNC(:V_CNT,-1) END
);


-- AVG
CREATE TABLE EX_1 AS
SELECT NAME
       ,DECODE(GRADE,1,NULL,KOR) KOR
FROM EXAM_RSLT;

SELECT *
FROM EX_1;

SELECT SUM(KOR)/COUNT(*)
       ,AVG(KOR)
       ,SUM(KOR)/COUNT(KOR)
       ,COUNT(*)
       ,COUNT(KOR)
FROM EX_1;

-- MIN MAX SUM AVG COUNT : 값이 NULL일 경우 빼고 계산한다. 
-- * : ROW 수를 세어주는 것
SELECT NAME 
       ,KOR
       ,ENG
       ,MAT
FROM EXAM_RSLT
UNION ALL
SELECT '총계' NAME 
       ,SUM(KOR)
       ,SUM(ENG)
       ,SUM(MAT)
FROM EXAM_RSLT;
-- 같은 테이블을 2번 읽었다. 

SELECT DECODE(NO,1,NAME,2,CLASS,'총계') NAME
       ,SUM(KOR) KOR
       ,SUM(ENG) ENG
       ,SUM(MAT) MAT  
FROM EXAM_RSLT A,
    ( SELECT ROWNUM NO
      FROM DUAL
      CONNECT BY LEVEL <=3
    )
GROUP BY DECODE(NO,1,NAME,2,CLASS,'총계')
ORDER BY MIN(NO);
-- 조인 조건이 없는 조인. 무조건 조인. 카테시안 프로덕트(*) 조인이 프로덕트이다. 

SELECT *
FROM EXAM_RSLT;



-- sql 복습  
-- FROM 절 안의 SELECT문을 인라인뷰라고 한다. 
SELECT *
FROM (
    SELECT NAME
          ,CLASS
          ,KOR+ENG+MAT TOT
    FROM EXAM_RSLT
);

SELECT NAME
       ,CLASS
       ,GRADE
       ,ROUND((KOR+ENG+MAT)/3,1) ROUND
       ,( SELECT GRADE
          FROM COURSE_CREDITS
          WHERE (KOR+ENG+MAT)/3 BETWEEN ST_RNG AND ET_RNG
         ) VAL
FROM EXAM_RSLT;

-------------------------------------------------------------

SELECT NAME
      ,CLASS
      ,KOR
      ,ENG
      ,MAT
FROM EXAM_RSLT;

SELECT DECODE(NO,1,NAME,'TOT') NAME
      ,SUM(KOR) KOR
      ,SUM(ENG) ENG
      ,SUM(MAT) MAT
      ,SUM(KOR) + SUM(ENG) + SUM(MAT) TOT
FROM EXAM_RSLT A, COPY_T B
WHERE NO <= 2
GROUP BY DECODE(NO,1,NAME,'TOT');


SELECT DECODE(NO,1,NAME,2,CLASS,'총계') NAME
       ,SUM(KOR) KOR
       ,SUM(ENG) ENG
       ,SUM(MAT) MAT
       ,SUM(KOR+ENG+MAT) TOT
FROM EXAM_RSLT A,
    ( SELECT ROWNUM NO
      FROM DUAL
      CONNECT BY LEVEL <=3
    )
GROUP BY DECODE(NO,1,NAME,2,CLASS,'총계')
ORDER BY MIN(NO);

--------------------------------------------------------
-- 3월 4일 (금) 숙제
-- 분석 함수의 이해 (PART 1)
-- 3가지 결과값이 어떻게 다른지 코딩해보기

SELECT *
FROM EXAM_RSLT;

-- 1) 
SELECT NAME
      ,SUM(KOR) KOR
      ,SUM(ENG) ENG
      ,SUM(MAT) MAT
      ,SUM(KOR+ENG+MAT) TOT
FROM EXAM_RSLT A
GROUP BY CLASS, NAME
UNION ALL
SELECT CLASS
      ,SUM(KOR) KOR
      ,SUM(ENG) ENG
      ,SUM(MAT) MAT
      ,SUM(KOR+ENG+MAT) TOT
FROM EXAM_RSLT A
GROUP BY CLASS
UNION ALL
SELECT 'TOT'
      ,SUM(KOR) KOR
      ,SUM(ENG) ENG
      ,SUM(MAT) MAT
      ,SUM(KOR+ENG+MAT) TOT
FROM EXAM_RSLT A
GROUP BY NULL;

-- 2)
SELECT NVL(DECODE(NO,1,NAME,2,CLASS),'TOT') NAME
      ,SUM(KOR) KOR
      ,SUM(ENG) ENG
      ,SUM(MAT) MAT
      ,SUM(KOR+ENG+MAT) TOT
FROM EXAM_RSLT A,
    ( SELECT NO
      FROM COPY_T
      WHERE ROWNUM <= 3
    ) B
GROUP BY DECODE(NO,1,CLASS)
        ,DECODE(NO,1,NAME,2,CLASS)
ORDER BY MIN(NO), KOR;

SELECT *
FROM EXAM_RSLT;

-- 3) 
SELECT DECODE(GROUPING(CLASS)||GROUPING(NAME),'00','NAME','01','CLASS','TOT') NAME
    ,SUM(KOR) KOR
    ,SUM(ENG) ENG
    ,SUM(MAT) MAT
    ,SUM(KOR+ENG+MAT) TOT
    ,GROUPING(CLASS)||GROUPING(NAME) GR
FROM EXAM_RSLT A
GROUP BY ROLLUP(CLASS,NAME)
ORDER BY GR,KOR;


SELECT DECODE(GROUPING(CLASS)||GROUPING(NAME),'00','NAME','01','CLASS','TOT') NAME
    ,SUM(KOR) KOR
    ,SUM(ENG) ENG
    ,SUM(MAT) MAT
    ,SUM(KOR+ENG+MAT) TOT
FROM EXAM_RSLT A
GROUP BY ROLLUP(CLASS,NAME)
;
-- GROUPING : 해당 컬럼이 GR에 포함되어 있으면 0을 리턴 / 안 되었으면 1을 리턴
-- GROUP BY에 어떤 칼럼이 기준으로 사용되었는지 알 수 있는 방법으로 사용된다. 

SELECT DEPTNO,GRADE,SUM(WEIGHT)
      ,GROUPING(DEPTNO)||GROUPING(GRADE) AS TGT
      ,'DEPTNO('||DECODE(GROUPING(DEPTNO),0,'O','X')||')'||'/ GRADE('||DECODE(GROUPING(GRADE),0,'O','X')||')' AS TGT_CMT
FROM STUDENT
GROUP BY ROLLUP(DEPTNO,GRADE);

SELECT DEPTNO,GRADE,SUM(WEIGHT)
      ,GROUPING(DEPTNO)||GROUPING(GRADE) AS TGT
      ,'DEPTNO('||DECODE(GROUPING(DEPTNO),0,'O','X')||')'||' / GRADE('||DECODE(GROUPING(GRADE),0,'O','X')||')' AS TGT_CMT
FROM STUDENT
GROUP BY CUBE(DEPTNO,GRADE)
ORDER BY 4;


-- 분석해보기
SELECT MAX(DECODE(NO,1,NAME) ) NAME
      ,SEQ
      ,MIN(DECODE(NO,1,KOR)) KOR
      ,MIN(DECODE(NO,1,ENG)) ENG
      ,MIN(DECODE(NO,1,MAT)) MAT
      ,MIN(DECODE(NO,1,KOR)) + MIN(DECODE(NO,1,ENG)) + MIN(DECODE(NO,1,MAT)) TOT
      ,MIN(DECODE(NO,2,KOR)) + MIN(DECODE(NO,2,ENG)) + MIN(DECODE(NO,2,MAT)) SUB_TOT
      ,(MIN(DECODE(NO,1,KOR)) + MIN(DECODE(NO,1,ENG)) + MIN(DECODE(NO,1,MAT))) - (MIN(DECODE(NO,2,KOR)) + MIN(DECODE(NO,2,ENG)) + MIN(DECODE(NO,2,MAT))) CHA 
FROM (
SELECT NAME
      ,NO
      ,DECODE(NO,1,SEQ,SEQ+1) SEQ
      ,CLASS
      
      ,KOR KOR
      ,ENG ENG
      ,MAT MAT
      FROM(
            SELECT ROWNUM SEQ,A.*
            FROM (SELECT NAME,CLASS,KOR,ENG,MAT FROM EXAM_RSLT A ORDER BY KOR+ENG+MAT DESC , NAME) A ) ,COPY_T B
      WHERE NO <= 2)
GROUP BY SEQ
HAVING MIN(DECODE(NO,1,KOR)) IS NOT NULL
ORDER BY SEQ;

SELECT NAME
      ,DENSE_RANK() OVER(ORDER BY KOR + ENG + MAT DESC) D_RK
      ,CLASS
      ,KOR
      ,ENG
      ,MAT
      ,KOR+ENG+MAT TOT
      ,KOR+ENG+MAT - LAG(KOR+ENG+MAT) OVER ( ORDER BY KOR+ENG+MAT DESC) AS LAG_CHA
FROM EXAM_RSLT;

SELECT NVL(DECODE(NO,1,NAME,2,CLASS),'TOT') NAME
      ,SUM(KOR) KOR
      ,SUM(ENG) ENG
      ,SUM(MAT) MAT
      ,SUM(KOR+ENG+MAT) TOT
FROM EXAM_RSLT A,
    ( SELECT NO
      FROM COPY_T
      WHERE ROWNUM <= 3
      ) B
GROUP BY DECODE(NO,1,CLASS)
        ,DECODE(NO,1,NAME,2,CLASS)
ORDER BY MIN(NO), KOR;


SELECT NAME
      ,ENG
      ,LAG(ENG) OVER(ORDER BY ENG DESC, NAME) PENG
FROM EXAM_RSLT;



SELECT MAX(DECODE(NO,1,NAME)) NAME
      ,MIN(DECODE(NO,1,ENG)) ENG
      ,MIN(DECODE(NO,2,ENG))SUB
      ,MIN(DECODE(NO,1,ENG))- MIN(DECODE(NO,2,ENG)) CHA 
FROM (
SELECT NAME
      ,NO
      ,DECODE(NO,1,SEQ,SEQ+1) SEQ
      ,ENG
      FROM(
            SELECT ROWNUM SEQ,A.*
            FROM (SELECT NAME,ENG FROM EXAM_RSLT A ORDER BY ENG DESC, NAME) A ),COPY_T B
      WHERE NO <= 2)
GROUP BY SEQ
HAVING MIN(DECODE(NO,1,ENG)) IS NOT NULL
ORDER BY SEQ;

CREATE VIEW YYW_HW1_20220316 AS
SELECT *
FROM DUAL;
/* 
SELECT MAX(DECODE(NO,1,NAME)) NAME
      ,MIN(DECODE(NO,1,ENG)) ENG
      ,MIN(DECODE(NO,2,ENG))SUB
      ,MIN(DECODE(NO,1,ENG))- MIN(DECODE(NO,2,ENG)) CHA 
FROM (
SELECT NAME
      ,NO
      ,DECODE(NO,1,SEQ,SEQ+1) SEQ
      ,ENG
      FROM(
            SELECT ROWNUM SEQ,A.*
            FROM (SELECT NAME,ENG FROM EXAM_RSLT A ORDER BY ENG DESC, NAME) A ),COPY_T B
      WHERE NO <= 2)
GROUP BY SEQ
HAVING MIN(DECODE(NO,1,ENG)) IS NOT NULL
ORDER BY SEQ;

;*/

-- 분석함수 : 로우들간의 관계가 (원래는 독립적인데) 그 관계를 맺어주는 것
-- LAG : 이전 로우를 내 옆에 갖다놓는다. OVER 안에 분석함수의 기준을 써준다. ( 그 순서 )
SELECT NAME
      ,ENG
      ,LAG(ENG) OVER(ORDER BY ENG DESC, NAME) PENG
      ,(ENG - LAG(ENG) OVER(ORDER BY ENG DESC, NAME)) SUB
FROM EXAM_RSLT;

-- LEAD : 이후 로우를 내 옆에 갖다놓는다.
SELECT NAME
      ,ENG
      ,LAG(ENG) OVER(ORDER BY ENG DESC, NAME) PENG
      ,LEAD(ENG) OVER(ORDER BY ENG DESC, NAME) PENG_1
FROM EXAM_RSLT;

SELECT NAME
      ,ENG
      ,RANK() OVER(ORDER BY ENG DESC, NAME)
FROM EXAM_RSLT;

SELECT NAME
      ,ENG
      ,RANK() OVER(ORDER BY ENG DESC)
      ,DENSE_RANK() OVER(ORDER BY ENG DESC)
FROM EXAM_RSLT;

-- 순서가 있는 함수들은 정렬 기준이 있어야 한다. 
SELECT NAME
      ,ENG
      ,SUM(ENG) OVER()
FROM EXAM_RSLT;
-- 순서가 중요하지 않을 때에는 OVER에 써주지 않아도 된다. 

-- RUNNING SUMMARY : 순서대로 진행해가면서 더해가는 방식
SELECT NAME
      ,ENG
      ,SUM(ENG) OVER(ORDER BY ENG DESC, NAME)
FROM EXAM_RSLT;

-- 파티션을 먼저 나눈다음에 분석함수를 먹일 수 있다.
SELECT NAME
      ,ENG
      ,CLASS
      ,RANK() OVER( PARTITION BY CLASS ORDER BY ENG DESC, NAME)
FROM EXAM_RSLT;



CREATE TABLE EXAM_TST1 AS
SELECT NAME
    ,CLASS
    ,DECODE(MOD(ROWNUM, 2),0,KOR) KOR
FROM EXAM_RSLT;

DROP TABLE EXAM_TST1;

SELECT NAME
    ,KOR
    ,RANK() OVER(ORDER BY KOR DESC NULLS FIRST, NAME NULLS LAST)
FROM EXAM_TST1;


-- 점심 과제
SELECT MIN(DECODE(SUB,NULL,NO)) NO
      ,MIN(DECODE(SUB,NULL,ST_DT)) ST_DT
      ,MAX(ET_RK) ET_DT
      ,MIN(DECODE(LAGDATE,NULL,NM)) NM
FROM (SELECT NO
    ,ST_DT
    ,ET_DT
    ,LAG(ET_DT) OVER(PARTITION BY NM ORDER BY ET_DT) LAGDATE
    ,ST_DT - LAGDATE SUB
    ,RANK() OVER(PARTITION BY NM ORDER BY ET_DT) ET_RK
    ,NM
FROM(
    SELECT NO
    ,ST_DT
    ,ET_DT
    ,LAG(ET_DT) OVER(PARTITION BY NM ORDER BY NM, ET_DT) LAGDATE
    ,NM
FROM ORG_TBL)
GROUP BY NM
);

-- 해설
SELECT MIN(NO)
      ,MIN(ST_DT)||'~'||MAX(ET_DT) DT
      ,MIN(NM) NM
FROM(
SELECT NO
      ,ST_DT
      ,ET_DT
      ,NM
      ,SUM(SF) OVER(ORDER BY ROWNUM) TF
FROM (
SELECT NO
      ,ST_DT
      ,ET_DT
      ,NM
      ,DECODE(ST_DT,LAG(ET_DT) OVER(PARTITION BY NM ORDER BY ST_DT),0,1) SF
FROM ORG_TBL
))GROUP BY TF
ORDER BY NM, MIN(ST_DT);


-- 실습과제(진행) => GOOGLE CHART
SELECT COUNT(*)
FROM SALE_TBL;

SELECT *
FROM SALE_TBL;

SELECT *
FROM CD_TBL
WHERE CD_ID = '50';

SELECT *
FROM CD_TBL
WHERE CD_ID = '100005';

SELECT AREA_CD, B.CD_NM
      ,REGION_AREA
      ,PROD_ID
      ,C.CD_NM
      ,SALE_CNT
FROM SALE_TBL A, CD_TBL B, CD_TBL C
WHERE A.AREA_CD = B.CD_ID
AND A.PROD_ID = C.CD_ID
AND LENGTH(B.CD_ID) =2
AND LENGTH(C.CD_ID) =6
;

-- GROUP BY를 하면 건수를 더 줄일 수 있기 때문에 먼저 해준다. 
-- 61,000,000건~
SELECT *
FROM SALE_TBL
ORDER BY AREA_CD, REGION_AREA, PROD_ID;

-- 492건으로 줄어듦
SELECT *
FROM 
( SELECT AREA_CD
      ,REGION_AREA
      ,PROD_ID
      ,SUM(SALE_CNT) SALE_CNT
FROM SALE_TBL
GROUP BY AREA_CD, REGION_AREA, PROD_ID
) GROUP BY AREA_CD
          ,REGION_AREA;
          
SELECT DISTINCT PROD_ID
FROM SALE_TBL
ORDER BY PROD_ID;


SELECT DECODE(GROUPING(AREA_CE)||GROUPING(REGION_ARE),'00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합계') CD_NM
      --,AREA_CD
      ,REGION_AREA
      ,MIN(CD_NM) CD_NM
      ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT))),0) 청소기
      ,SUM(DECODE(PROD_ID,'100001',SALE_CNT))) 세탁기
      ,SUM(DECODE(PROD_ID,'100002',SALE_CNT))) 건조기
      ,SUM(DECODE(PROD_ID,'100003',SALE_CNT))) 정수기
      ,SUM(DECODE(PROD_ID,'100004',SALE_CNT))) 도어락
      ,SUM(DECODE(PROD_ID,'100005',SALE_CNT))) 전화기
      ,SUM(DECODE(PROD_ID,'100006',SALE_CNT))) 냉장고
      ,SUM(DECODE(PROD_ID,'100007',SALE_CNT))) 김치냉장고
      ,SUM(DECODE(PROD_ID,'100008',SALE_CNT))) 전자레인지
      ,SUM(DECODE(PROD_ID,'100009',SALE_CNT))) 가스레인지
      ,GROUPING(AREA_CD)||GROUPING(REGION_ARE) GR
      ,SUM(SALE_CNT) OVER(ORDER BY AREA_CD DESC)
FROM ( 
SELECT AREA_CD
          ,REGION_AREA
          ,PROD_ID
          ,SUM(SALE_CNT) SALE_CNT
    FROM SALE_TBL
    GROUP BY AREA_CD, REGION_AREA, PROD_ID
) A, CD_TBL B
WHERE A.AREA_CD = D.D_ID
AND LENGTH(B.CD_ID) =2
GROUP BY ROLLUP(AREA_CD,REGION_AREA);


-- 검증
SELECT 302104 - SUM(SALE_CNT)
FROM SALE_TBL
WHERE AREA_CD = '60'
AND REGION_AREA = 'US'
AND PROD_ID = '100001';

SELECT CD_ID,MIN(CD_NM),MAX(CD_NM)
FROM CD_TBL
WHERE LENGTH(CD_ID) = 2
AND CD_ID = 10
GROUP BY CD_ID
ORDER BY CD_ID;

SELECT CD_ID,CD_NM
FROM CD_TBL
WHERE LENGTH(CD_ID) = 2
AND CD_ID = 10
GROUP BY CD_ID,CD_NM
ORDER BY CD_ID;


 
SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA),
        '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
        -- ,AREA_CD
      ,REGION_AREA
      ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) 청소기
      ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) 세탁기
      ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) 건조기
      ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) 정수기
      ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) 도어락
      ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) 전화기
      ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) 냉장고
      ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) 김치냉장고
      ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) 전자레인지
      ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) 가스레인지
      ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
      ,SUM(SALE_CNT) TOT
      ,MAX(SALE_CNT)
      ,MIN(SALE_CNT)
FROM (
  SELECT  AREA_CD
         ,REGION_AREA
         ,PROD_ID
         ,SUM(SALE_CNT) SALE_CNT
  FROM SALE_TBL
  GROUP BY AREA_CD
          ,REGION_AREA
          ,PROD_ID
) A,CD_TBL B
WHERE A.AREA_CD = B.CD_ID
AND   LENGTH(B.CD_ID) =2
GROUP BY ROLLUP(AREA_CD, REGION_AREA);

SELECT *
FROM SALE_TBL
WHERE ROWNUM < 10000;



CREATE VIEW V_YYW_20220318_HW1_1 AS
SELECT *
FROM DUALL

SELECT CD_NM
      ,REGION_AREA
	  ,MAX(C0)||' '||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C0 
      ,MAX(C1)||' '||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C1
      ,MAX(C2)||' '||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C2
      ,MAX(C3)||' '||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C3
      ,MAX(C4)||' '||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C4
      ,MAX(C5)||' '||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C5
      ,MAX(C6)||' '||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C6
      ,MAX(C7)||' '||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C7
      ,MAX(C8)||' '||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C8
      ,MAX(C9)||' '||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C9
      --,MAX(TOT)
      ,SUM(SALE_CNT) OVER(ORDER BY CD_NM) TOT
      --,DECODE(C0,0,1) SF_C0
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA),'00' ,MIN(CD_NM) ,'01' ,MIN(CD_NM)||'합계','총합') CD_NM
        --,AREA_CD
        ,REGION_AREA
        ,SUM(DECODE(PROD_ID,'100000',SALE_CNT)) C0
        ,SUM(DECODE(PROD_ID,'100001',SALE_CNT)) C1
        ,SUM(DECODE(PROD_ID,'100002',SALE_CNT)) C2
        ,SUM(DECODE(PROD_ID,'100003',SALE_CNT)) C3
        ,SUM(DECODE(PROD_ID,'100004',SALE_CNT)) C4
        ,SUM(DECODE(PROD_ID,'100005',SALE_CNT)) C5
        ,SUM(DECODE(PROD_ID,'100006',SALE_CNT)) C6
        ,SUM(DECODE(PROD_ID,'100007',SALE_CNT)) C7
        ,SUM(DECODE(PROD_ID,'100008',SALE_CNT)) C8
        ,SUM(DECODE(PROD_ID,'100009',SALE_CNT)) C9
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT) TOT
        ,RK
        
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID
           ,SUM(SALE_CNT) SALE_CNT
           ,RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC,PROD_ID) RK
    FROM SALE_TBL
    --WHERE ROWNUM <= 100000
    GROUP BY AREA_CD
            ,REGION_AREA
            ,PROD_ID
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
GROUP BY AREA_CD, REGION_AREA,PROD_ID
)
GROUP BY ROLLUP(AREA_CD, REGION_AREA);
;

-- 해설
SELECT MIN(NO)
      ,MIN(ST_DT)||'~'||MAX(ET_DT) DT
      ,MIN(NM) NM
FROM(
SELECT NO
      ,ST_DT
      ,ET_DT
      ,NM
      ,SUM(SF) OVER(ORDER BY ROWNUM) TF
FROM (
SELECT NO
      ,ST_DT
      ,ET_DT
      ,NM
      ,DECODE(ST_DT,LAG(ET_DT) OVER(PARTITION BY NM ORDER BY ST_DT),0,1) SF
FROM ORG_TBL
))GROUP BY TF
ORDER BY NM, MIN(ST_DT);


SELECT AREA_CD,REGION_AREA, PROD_ID,COUNT(*)
FROM SALE_TBL
GROUP BY AREA_CD,REGION_AREA, PROD_ID;

SELECT *
FROM SALE_TBL
WHERE AREA_CD='90'
AND REGION_AREA='GER'
AND PROD_ID ='100002';

SELECT *
FROM CD_TBL;

SELECT TEXT
FROM ALL_VIEWS
WHERE VIEW_NAME='V_STAT_SAMPLE2';


  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WISE_USER"."V_STAT_SAMPLE2" ("CD_NM", "REGION_AREA", "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "TOT") AS 
  SELECT CD_NM
      ,REGION_AREA
      ,C0||' '||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C0
      ,C1||' '||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C1
      ,C2||' '||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C2
      ,C3||' '||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C3
      ,C4||' '||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C4
      ,C5||' '||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C5
      ,C6||' '||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C6
      ,C7||' '||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C7
      ,C8||' '||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C8
      ,C9||' '||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼') C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
          -- ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT 
FROM(
SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID
           ,SUM(SALE_CNT) SALE_CNT
           ,DENSE_RANK() 
           ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD, PROD_ID) M_CNT
           ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID) M_CNT_
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID
           ,SUM(SALE_CNT) SALE_CNT
           ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD, PROD_ID) M_CNT
           ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID) M_CNT_
    FROM SALE_TBL
    GROUP BY AREA_CD
            ,REGION_AREA
            ,PROD_ID
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(AREA_CD ,REGION_AREA)
);






SELECT CD_NM
      ,REGION_AREA
      ,C0||' '||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R0,1,2),'01',SUBSTR(R0,3,2),SUBSTR(R0,5,2)),'0'),0,R0+1,LTRIM(DECODE(GR,'00',SUBSTR(R0,1,2),'01',SUBSTR(R0,3,2),SUBSTR(R0,5,2)))) C0
      ,C1||' '||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R1,1,2),'01',SUBSTR(R1,3,2),SUBSTR(R1,5,2)),'0'),0,R1+1,LTRIM(DECODE(GR,'00',SUBSTR(R1,1,2),'01',SUBSTR(R1,3,2),SUBSTR(R1,5,2)))) C1
      ,C2||' '||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R2,1,2),'01',SUBSTR(R2,3,2),SUBSTR(R2,5,2)),'0'),0,R2+1,LTRIM(DECODE(GR,'00',SUBSTR(R2,1,2),'01',SUBSTR(R2,3,2),SUBSTR(R2,5,2)))) C2
      ,C3||' '||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R3,1,2),'01',SUBSTR(R3,3,2),SUBSTR(R3,5,2)),'0'),0,R3+1,LTRIM(DECODE(GR,'00',SUBSTR(R3,1,2),'01',SUBSTR(R3,3,2),SUBSTR(R3,5,2)))) C3
      ,C4||' '||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R4,1,2),'01',SUBSTR(R4,3,2),SUBSTR(R4,5,2)),'0'),0,R4+1,LTRIM(DECODE(GR,'00',SUBSTR(R4,1,2),'01',SUBSTR(R4,3,2),SUBSTR(R4,5,2)))) C4
      ,C5||' '||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R5,1,2),'01',SUBSTR(R5,3,2),SUBSTR(R5,5,2)),'0'),0,R5+1,LTRIM(DECODE(GR,'00',SUBSTR(R5,1,2),'01',SUBSTR(R5,3,2),SUBSTR(R5,5,2)))) C5
      ,C6||' '||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R6,1,2),'01',SUBSTR(R6,3,2),SUBSTR(R6,5,2)),'0'),0,R6+1,LTRIM(DECODE(GR,'00',SUBSTR(R6,1,2),'01',SUBSTR(R6,3,2),SUBSTR(R6,5,2)))) C6
      ,C7||' '||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R7,1,2),'01',SUBSTR(R7,3,2),SUBSTR(R7,5,2)),'0'),0,R7+1,LTRIM(DECODE(GR,'00',SUBSTR(R7,1,2),'01',SUBSTR(R7,3,2),SUBSTR(R7,5,2)))) C7
      ,C8||' '||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R8,1,2),'01',SUBSTR(R8,3,2),SUBSTR(R8,5,2)),'0'),0,R8+1,LTRIM(DECODE(GR,'00',SUBSTR(R8,1,2),'01',SUBSTR(R8,3,2),SUBSTR(R8,5,2)))) C8
      ,C9||' '||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||DECODE(LTRIM(DECODE(GR,'00',SUBSTR(R9,1,2),'01',SUBSTR(R9,3,2),SUBSTR(R9,5,2)),'0'),0,R9+1,LTRIM(DECODE(GR,'00',SUBSTR(R9,1,2),'01',SUBSTR(R9,3,2),SUBSTR(R9,5,2)))) C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
          -- ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
	    ,DECODE( MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R0
        ,DECODE( MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R1
        ,DECODE( MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R2
        ,DECODE( MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R3
        ,DECODE( MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R4
        ,DECODE( MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R5
        ,DECODE( MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R6
        ,DECODE( MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R7
        ,DECODE( MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R8
        ,DECODE( MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')+1,MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R9
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT 
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID           
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD ORDER BY  M_CNT DESC )  M_RK
           ,DENSE_RANK()OVER(ORDER BY T_CNT DESC)  T_RK
           ,SALE_CNT 
    FROM (
      SELECT  AREA_CD
             ,REGION_AREA
             ,PROD_ID
             ,SUM(SALE_CNT) SALE_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
      FROM SALE_TBL
      WHERE ROWNUM < 1000000
      GROUP BY AREA_CD
              ,REGION_AREA
              ,PROD_ID
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(AREA_CD ,REGION_AREA)
);










  
SELECT CD_NM
      ,REGION_AREA
      ,C0||' '||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R0,1,2),'01',SUBSTR(R0,3,2),SUBSTR(R0,5,2)),'0') C0
      ,C1||' '||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R1,1,2),'01',SUBSTR(R1,3,2),SUBSTR(R1,5,2)),'0') C1
      ,C2||' '||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R2,1,2),'01',SUBSTR(R2,3,2),SUBSTR(R2,5,2)),'0') C2
      ,C3||' '||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R3,1,2),'01',SUBSTR(R3,3,2),SUBSTR(R3,5,2)),'0') C3
      ,C4||' '||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R4,1,2),'01',SUBSTR(R4,3,2),SUBSTR(R4,5,2)),'0') C4
      ,C5||' '||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R5,1,2),'01',SUBSTR(R5,3,2),SUBSTR(R5,5,2)),'0') C5
      ,C6||' '||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R6,1,2),'01',SUBSTR(R6,3,2),SUBSTR(R6,5,2)),'0') C6
      ,C7||' '||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R7,1,2),'01',SUBSTR(R7,3,2),SUBSTR(R7,5,2)),'0') C7
      ,C8||' '||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R8,1,2),'01',SUBSTR(R8,3,2),SUBSTR(R8,5,2)),'0') C8
      ,C9||' '||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R9,1,2),'01',SUBSTR(R9,3,2),SUBSTR(R9,5,2)),'0') C9
--      ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
--      ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
--      ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
--      ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
--      ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
--      ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
--      ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
--      ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
--      ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
--      ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
          -- ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R0
        ,MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R1
        ,MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R2
        ,MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R3
        ,MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R4
        ,MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R5
        ,MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R6
        ,MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R7
        ,MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R8
        ,MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R9
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT 
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID           
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD ORDER BY  M_CNT DESC )  M_RK
           ,DENSE_RANK()OVER(ORDER BY T_CNT DESC)  T_RK
           ,SALE_CNT 
    FROM (
      SELECT  AREA_CD
             ,REGION_AREA
             ,PROD_ID
             ,SUM(SALE_CNT) SALE_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
      FROM SALE_TBL
      GROUP BY AREA_CD
              ,REGION_AREA
              ,PROD_ID
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(AREA_CD ,REGION_AREA)
);



SELECT CD_NM
      ,REGION_AREA
      ,C0||' '||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R0,1,2),'01',SUBSTR(R0,3,2),SUBSTR(R0,5,2)),'0') C0
      ,C1||' '||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R1,1,2),'01',SUBSTR(R1,3,2),SUBSTR(R1,5,2)),'0') C1
      ,C2||' '||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R2,1,2),'01',SUBSTR(R2,3,2),SUBSTR(R2,5,2)),'0') C2
      ,C3||' '||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R3,1,2),'01',SUBSTR(R3,3,2),SUBSTR(R3,5,2)),'0') C3
      ,C4||' '||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R4,1,2),'01',SUBSTR(R4,3,2),SUBSTR(R4,5,2)),'0') C4
      ,C5||' '||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R5,1,2),'01',SUBSTR(R5,3,2),SUBSTR(R5,5,2)),'0') C5
      ,C6||' '||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R6,1,2),'01',SUBSTR(R6,3,2),SUBSTR(R6,5,2)),'0') C6
      ,C7||' '||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R7,1,2),'01',SUBSTR(R7,3,2),SUBSTR(R7,5,2)),'0') C7
      ,C8||' '||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R8,1,2),'01',SUBSTR(R8,3,2),SUBSTR(R8,5,2)),'0') C8
      ,C9||' '||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'||LTRIM(DECODE(GR,'00',SUBSTR(R9,1,2),'01',SUBSTR(R9,3,2),SUBSTR(R9,5,2)),'0') C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
          -- ,AREA_CD
        ,REGION_AREA      
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
    ,DECODE(MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R0
	,DECODE(MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R1
	,DECODE(MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R2
	,DECODE(MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R3
	,DECODE(MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R4
	,DECODE(MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R5
	,DECODE(MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R6
	,DECODE(MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R7
	,DECODE(MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R8
	,DECODE(MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))),NULL,'__'||MAX(LPAD(T_RK,2,'0')))||MIN(DECODE(PROD_ID,'100000',LPAD(MAX(D_RK),2,'0')||LPAD(MAX(M_RK),2,'0')||LPAD(MAX(T_RK),2,'0'))),MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0')))) R9      
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT 
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID           
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD ORDER BY  M_CNT DESC )  M_RK
           ,DENSE_RANK()OVER(ORDER BY T_CNT DESC)  T_RK
           ,SALE_CNT 
    FROM (
      SELECT  AREA_CD
             ,REGION_AREA
             ,PROD_ID
             ,SUM(SALE_CNT) SALE_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
      FROM SALE_TBL
      GROUP BY AREA_CD
              ,REGION_AREA
              ,PROD_ID
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(AREA_CD ,REGION_AREA)
);








 
SELECT CD_NM
      ,REGION_AREA
     
      
      ,TOT
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
          -- ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R0
        ,MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R1
        ,MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R2
        ,MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R3
        ,MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R4
        ,MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R5
        ,MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R6
        ,MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R7
        ,MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R8
        ,MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R9
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT 
        ,MAX(D_RK)+1 MX_DRK
        ,MAX(M_RK)+1 MX_MRK
        ,MAX(T_RK)+1 MX_T
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID           
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD ORDER BY  M_CNT DESC )  M_RK
           ,DENSE_RANK()OVER(ORDER BY T_CNT DESC)  T_RK
           ,SALE_CNT      
    FROM (
      SELECT  AREA_CD
             ,REGION_AREA
             ,PROD_ID
             ,SUM(SALE_CNT) SALE_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
      FROM SALE_TBL
      WHERE ROWNUM <= 100000
      GROUP BY AREA_CD
              ,REGION_AREA
              ,PROD_ID
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(AREA_CD ,REGION_AREA)
);


-- 포맷 맞추기
SELECT 1/2, 1/2||'%', TO_CHAR(1/2,'FM0.0'),TO_CHAR(1/2,'FM000.0'),TO_CHAR(1/2,'FM990.0')
FROM DUAL;





 
SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R0,1,2),MX_DRK),
        '01',NVL(SUBSTR(R0,3,2),MX_MRK),NVL(SUBSTR(R0,5,2),MX_TRK)),'0') C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R1,1,2),MX_DRK),
        '01',NVL(SUBSTR(R1,3,2),MX_MRK),NVL(SUBSTR(R1,5,2),MX_TRK)),'0') C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R2,1,2),MX_DRK),
        '01',NVL(SUBSTR(R2,3,2),MX_MRK),NVL(SUBSTR(R2,5,2),MX_TRK)),'0') C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R3,1,2),MX_DRK),
        '01',NVL(SUBSTR(R3,3,2),MX_MRK),NVL(SUBSTR(R3,5,2),MX_TRK)),'0') C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R4,1,2),MX_DRK),
        '01',NVL(SUBSTR(R4,3,2),MX_MRK),NVL(SUBSTR(R4,5,2),MX_TRK)),'0') C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R5,1,2),MX_DRK),
        '01',NVL(SUBSTR(R5,3,2),MX_MRK),NVL(SUBSTR(R5,5,2),MX_TRK)),'0') C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R6,1,2),MX_DRK),
        '01',NVL(SUBSTR(R6,3,2),MX_MRK),NVL(SUBSTR(R6,5,2),MX_TRK)),'0') C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R7,1,2),MX_DRK),
        '01',NVL(SUBSTR(R7,3,2),MX_MRK),NVL(SUBSTR(R7,5,2),MX_TRK)),'0') C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R8,1,2),MX_DRK),
        '01',NVL(SUBSTR(R8,3,2),MX_MRK),NVL(SUBSTR(R8,5,2),MX_TRK)),'0') C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R9,1,2),MX_DRK),
        '01',NVL(SUBSTR(R9,3,2),MX_MRK),NVL(SUBSTR(R9,5,2),MX_TRK)),'0') C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
          -- ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R0
        ,MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R1
        ,MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R2
        ,MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R3
        ,MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R4
        ,MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R5
        ,MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R6
        ,MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R7
        ,MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R8
        ,MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R9
        ,MAX(D_RK) + 1 MX_DRK
        ,MAX(M_RK) + 1 MX_MRK
        ,MAX(T_RK) + 1 MX_TRK
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT         
        
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID           
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD ORDER BY  M_CNT DESC )  M_RK
           ,DENSE_RANK()OVER(ORDER BY T_CNT DESC)  T_RK
           ,SALE_CNT 
    FROM (
      SELECT  AREA_CD
             ,REGION_AREA
             ,PROD_ID
             ,SUM(SALE_CNT) SALE_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
             
      FROM SALE_TBL 
     -- WHERE AREA_CD = DECODE(:ARG_AREA_CD, AREA_CD, :ARG_AREA_CD, NULL, AREA_CD) 아래와 같다
      WHERE AREA_CD = NVL(:ARG_AREA_CD, AREA_CD)
      AND ROWNUM <= :ARG_CNT 
      GROUP BY AREA_CD
              ,REGION_AREA
              ,PROD_ID
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) = 2
   GROUP BY ROLLUP(AREA_CD ,REGION_AREA)
   ORDER BY DECODE(AREA_CD, '10',:R1, '20', :R2, '30', :R3, '40', :R4, '50', :R5, '60', :R6, '70', :R7, '80', :R8, '90', :R9), DECODE(:ARG_DIR,'F',1,-1)*GR   -- DESC는 떼었다 붙혔다 할 수 없기 때문에 이렇게 해준다.
);



SELECT ROWNUM NO
FROM DUAL
CONNECT BY LEVEL <= 5
ORDER BY NO;

SELECT DISTINCT AREA_CD
FROM SALE_TBL;


-- 3/18 과제 
SELECT AREA_CD
    ,REGION_AREA
    ,PROD_ID        
    ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
    ,SUM(SALE_CNT) SALE_CNT
    ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
FROM SALE_TBL
GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111' ; 





SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R0,1,2),MX_DRK),
        '001',NVL(SUBSTR(R0,3,2),MX_MRK),NVL(SUBSTR(R0,5,2),MX_TRK)),'0') C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R1,1,2),MX_DRK),
        '001',NVL(SUBSTR(R1,3,2),MX_MRK),NVL(SUBSTR(R1,5,2),MX_TRK)),'0') C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R2,1,2),MX_DRK),
        '001',NVL(SUBSTR(R2,3,2),MX_MRK),NVL(SUBSTR(R2,5,2),MX_TRK)),'0') C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R3,1,2),MX_DRK),
        '001',NVL(SUBSTR(R3,3,2),MX_MRK),NVL(SUBSTR(R3,5,2),MX_TRK)),'0') C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R4,1,2),MX_DRK),
        '001',NVL(SUBSTR(R4,3,2),MX_MRK),NVL(SUBSTR(R4,5,2),MX_TRK)),'0') C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R5,1,2),MX_DRK),
        '001',NVL(SUBSTR(R5,3,2),MX_MRK),NVL(SUBSTR(R5,5,2),MX_TRK)),'0') C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R6,1,2),MX_DRK),
        '001',NVL(SUBSTR(R6,3,2),MX_MRK),NVL(SUBSTR(R6,5,2),MX_TRK)),'0') C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R7,1,2),MX_DRK),
        '001',NVL(SUBSTR(R7,3,2),MX_MRK),NVL(SUBSTR(R7,5,2),MX_TRK)),'0') C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R8,1,2),MX_DRK),
        '001',NVL(SUBSTR(R8,3,2),MX_MRK),NVL(SUBSTR(R8,5,2),MX_TRK)),'0') C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'000',NVL(SUBSTR(R9,1,2),MX_DRK),
        '001',NVL(SUBSTR(R9,3,2),MX_MRK),NVL(SUBSTR(R9,5,2),MX_TRK)),'0') C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
        ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R0
        ,MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R1
        ,MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R2
        ,MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R3
        ,MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R4
        ,MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R5
        ,MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R6
        ,MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R7
        ,MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R8
        ,MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R9
        ,MAX(D_RK) + 1 MX_DRK
        ,MAX(M_RK) + 1 MX_MRK
        ,MAX(T_RK) + 1 MX_TRK
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT         
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID           
           ,RK D_RK
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD ORDER BY  M_CNT DESC )  M_RK
           ,DENSE_RANK()OVER(ORDER BY T_CNT DESC)  T_RK
           ,SALE_CNT 
    FROM (             
      SELECT AREA_CD
            ,REGION_AREA
            ,PROD_ID        
            ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
            ,SUM(SALE_CNT) SALE_CNT
            ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
            ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
            ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        FROM SALE_TBL
        WHERE AREA_CD = NVL(:ARG_AREA_CD,AREA_CD)
            AND  ROWNUM <= :ARG_CNT
        GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
        HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111'
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY PROD_ID, ROLLUP(AREA_CD ,REGION_AREA)
) WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;







-- 합계 말고 NULL 뜨는 문제 
SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA),
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
           ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MAX(D_RK) + 1 MX_DRK
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR 
        ,SUM(SALE_CNT)    TOT     
        ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
  FROM (
  SELECT AREA_CD
        ,REGION_AREA
        ,PROD_ID 
        ,SUM(SALE_CNT) SALE_CNT
        ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
        ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT    
        ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK     
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR 
  FROM SALE_TBL
  WHERE AREA_CD = NVL(:ARG_AREA_CD,AREA_CD)
  AND  ROWNUM <= :ARG_CNT
  GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
  HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111'  
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(PROD_ID, AREA_CD ,REGION_AREA)   
) WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;







-- RE
SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R0,1,2),MX_DRK),
        '01',NVL(SUBSTR(R0,3,2),MX_MRK),NVL(SUBSTR(R0,5,2),MX_TRK)),'0')*/ C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R1,1,2),MX_DRK),
        '01',NVL(SUBSTR(R1,3,2),MX_MRK),NVL(SUBSTR(R1,5,2),MX_TRK)),'0')*/ C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R2,1,2),MX_DRK),
        '01',NVL(SUBSTR(R2,3,2),MX_MRK),NVL(SUBSTR(R2,5,2),MX_TRK)),'0')*/ C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R3,1,2),MX_DRK),
        '01',NVL(SUBSTR(R3,3,2),MX_MRK),NVL(SUBSTR(R3,5,2),MX_TRK)),'0')*/ C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R4,1,2),MX_DRK),
        '01',NVL(SUBSTR(R4,3,2),MX_MRK),NVL(SUBSTR(R4,5,2),MX_TRK)),'0')*/ C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R5,1,2),MX_DRK),
        '01',NVL(SUBSTR(R5,3,2),MX_MRK),NVL(SUBSTR(R5,5,2),MX_TRK)),'0')*/ C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R6,1,2),MX_DRK),
        '01',NVL(SUBSTR(R6,3,2),MX_MRK),NVL(SUBSTR(R6,5,2),MX_TRK)),'0')*/ C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R7,1,2),MX_DRK),
        '01',NVL(SUBSTR(R7,3,2),MX_MRK),NVL(SUBSTR(R7,5,2),MX_TRK)),'0')*/ C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R8,1,2),MX_DRK),
        '01',NVL(SUBSTR(R8,3,2),MX_MRK),NVL(SUBSTR(R8,5,2),MX_TRK)),'0')*/ C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        /*||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R9,1,2),MX_DRK),
        '01',NVL(SUBSTR(R9,3,2),MX_MRK),NVL(SUBSTR(R9,5,2),MX_TRK)),'0')*/ C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','011', '총합') CD_NM
           ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        --,MAX(D_RK) + 1 MX_DRK
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT         
  FROM (
  SELECT AREA_CD
        ,REGION_AREA
        ,PROD_ID 
        ,SUM(SALE_CNT) SALE_CNT
        ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) D_RK 
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR       
  FROM SALE_TBL
  WHERE AREA_CD = NVL(:ARG_AREA_CD,AREA_CD)
  AND  ROWNUM <= :ARG_CNT
    ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   
)
  GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
  HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111'      
WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;









-- 과제 SQL
SELECT AREA_CD
    ,REGION_AREA
    ,PROD_ID        
    ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
    ,SUM(SALE_CNT) SALE_CNT
    ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
FROM SALE_TBL
GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111'; 





SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||D_RK C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
        ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MAX(D_RK) + 1 MX_DRK
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT         
        ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
  FROM (
      SELECT  AREA_CD
             ,REGION_AREA
             ,PROD_ID
             ,SUM(SALE_CNT) SALE_CNT
             --,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA,PROD_ID ORDER BY SALE_CNT DESC )  D_RK
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
      FROM SALE_TBL     
      WHERE AREA_CD = NVL(:ARG_AREA_CD,AREA_CD)
      AND  ROWNUM <= :ARG_CNT
      GROUP BY AREA_CD
              ,REGION_AREA
              ,PROD_ID  
              --,SALE_CNT
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY AREA_CD ,REGION_AREA
) WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;


  SELECT AREA_CD
        ,REGION_AREA
        ,PROD_ID        
        ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
        ,SUM(SALE_CNT) SALE_CNT
  FROM SALE_TBL
  GROUP BY GROUPING SETS((AREA_CD,REGION_AREA,PROD_ID),(AREA_CD,PROD_ID),(PROD_ID))
  ORDER BY PROD_ID;


SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||RK C9
      ,TOT
FROM (
  
  SELECT DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','011', '총합') CD_NM
           ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        --,MAX(RK) + 1 MX_DRK
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT         
        ,PROD_ID        
        ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
  FROM SALE_TBL
  GROUP BY GROUPING SETS((AREA_CD,REGION_AREA,PROD_ID),(AREA_CD,PROD_ID),(PROD_ID))
  ORDER BY PROD_ID
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(PROD_ID,AREA_CD ,REGION_AREA)   
) WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;









-- 
SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R0,1,2),MX_DRK),
        '01',NVL(SUBSTR(R0,3,2),MX_MRK),NVL(SUBSTR(R0,5,2),MX_TRK)),'0') C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R1,1,2),MX_DRK),
        '01',NVL(SUBSTR(R1,3,2),MX_MRK),NVL(SUBSTR(R1,5,2),MX_TRK)),'0') C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R2,1,2),MX_DRK),
        '01',NVL(SUBSTR(R2,3,2),MX_MRK),NVL(SUBSTR(R2,5,2),MX_TRK)),'0') C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R3,1,2),MX_DRK),
        '01',NVL(SUBSTR(R3,3,2),MX_MRK),NVL(SUBSTR(R3,5,2),MX_TRK)),'0') C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R4,1,2),MX_DRK),
        '01',NVL(SUBSTR(R4,3,2),MX_MRK),NVL(SUBSTR(R4,5,2),MX_TRK)),'0') C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R5,1,2),MX_DRK),
        '01',NVL(SUBSTR(R5,3,2),MX_MRK),NVL(SUBSTR(R5,5,2),MX_TRK)),'0') C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R6,1,2),MX_DRK),
        '01',NVL(SUBSTR(R6,3,2),MX_MRK),NVL(SUBSTR(R6,5,2),MX_TRK)),'0') C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R7,1,2),MX_DRK),
        '01',NVL(SUBSTR(R7,3,2),MX_MRK),NVL(SUBSTR(R7,5,2),MX_TRK)),'0') C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R8,1,2),MX_DRK),
        '01',NVL(SUBSTR(R8,3,2),MX_MRK),NVL(SUBSTR(R8,5,2),MX_TRK)),'0') C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R9,1,2),MX_DRK),
        '01',NVL(SUBSTR(R9,3,2),MX_MRK),NVL(SUBSTR(R9,5,2),MX_TRK)),'0') C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '00',MIN(CD_NM),'01',MIN(CD_NM)||'합계','총합') CD_NM
           ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MIN(DECODE(PROD_ID,'100000',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R0
        ,MIN(DECODE(PROD_ID,'100001',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R1
        ,MIN(DECODE(PROD_ID,'100002',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R2
        ,MIN(DECODE(PROD_ID,'100003',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R3
        ,MIN(DECODE(PROD_ID,'100004',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R4
        ,MIN(DECODE(PROD_ID,'100005',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R5
        ,MIN(DECODE(PROD_ID,'100006',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R6
        ,MIN(DECODE(PROD_ID,'100007',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R7
        ,MIN(DECODE(PROD_ID,'100008',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R8
        ,MIN(DECODE(PROD_ID,'100009',LPAD(D_RK,2,'0')||LPAD(M_RK,2,'0')||LPAD(T_RK,2,'0'))) R9
        ,MAX(D_RK) + 1 MX_DRK
        ,MAX(M_RK) + 1 MX_MRK
        ,MAX(T_RK) + 1 MX_TRK
        ,GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
        ,SUM(SALE_CNT)    TOT         
  FROM (
    SELECT  AREA_CD
           ,REGION_AREA
           ,PROD_ID           
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SALE_CNT DESC )  D_RK
           ,DENSE_RANK()OVER(PARTITION BY AREA_CD ORDER BY  M_CNT DESC )  M_RK
           ,DENSE_RANK()OVER(ORDER BY T_CNT DESC)  T_RK
           ,SALE_CNT 
    FROM (
      SELECT  AREA_CD
             ,REGION_AREA
             ,PROD_ID
             ,SUM(SALE_CNT) SALE_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY AREA_CD,PROD_ID)  M_CNT
             ,SUM(SUM(SALE_CNT)) OVER(PARTITION BY PROD_ID)  T_CNT
      FROM SALE_TBL     
      WHERE AREA_CD = NVL(:ARG_AREA_CD,AREA_CD)
      AND  ROWNUM <= :ARG_CNT
      GROUP BY AREA_CD
              ,REGION_AREA
              ,PROD_ID
     )       
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
   GROUP BY ROLLUP(AREA_CD ,REGION_AREA)   
) WHERE GR = DECODE(:ARG_GR,'D','00','M','01','T','11',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;


SELECT AREA_CD
        ,REGION_AREA
        ,PROD_ID        
        ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
        ,SUM(SALE_CNT) SALE_CNT
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
  FROM SALE_TBL
  GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
  HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111' ;





----- 3/21
 SELECT CD_NM 
        --,AREA_CD
       ,REGION_AREA
       ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C6
    ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(RK,1,'▲')
        ||RK C9 
        ,TOT
  FROM (
    SELECT  REGION_AREA
                ,DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) , '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
     
                ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
                
                ,SUM(C0)
                ,SUM(C0)
                ,SUM(C0)
                ,SUM(C0)
                ,SUM(C0)
                ,SUM(C0)
                ,SUM(C0)
                ,SUM(C0)
                ,SUM(C0)
                
                ,SUM(SALE_CNT) TOT
                ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
    
    FROM(
  
         SELECT 
                --AREA_CD
                --,
                REGION_AREA
                ,DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) , '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
     
                ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 

                ,NVL(DECODE(PROD_ID,'100000',SUM(SALE_CNT)),0) C0
                ,NVL(DECODE(PROD_ID,'100001',SUM(SALE_CNT)),0) C1
                ,NVL(DECODE(PROD_ID,'100002',SUM(SALE_CNT)),0) C2
                ,NVL(DECODE(PROD_ID,'100003',SUM(SALE_CNT)),0) C3
                ,NVL(DECODE(PROD_ID,'100004',SUM(SALE_CNT)),0) C4
                ,NVL(DECODE(PROD_ID,'100005',SUM(SALE_CNT)),0) C5
                ,NVL(DECODE(PROD_ID,'100006',SUM(SALE_CNT)),0) C6
                ,NVL(DECODE(PROD_ID,'100007',SUM(SALE_CNT)),0) C7
                ,NVL(DECODE(PROD_ID,'100008',SUM(SALE_CNT)),0) C8
                ,NVL(DECODE(PROD_ID,'100009',SUM(SALE_CNT)),0) C9
                ,SUM(SALE_CNT) TOT
                ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
                
   FROM SALE_TBL A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
    AND   LENGTH(B.CD_ID) =2
  GROUP BY  ROLLUP (PROD_ID, AREA_CD, REGION_AREA)
  HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <> '111')         
  );







SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R0,1,2),MX_DRK),
       -- '01',NVL(SUBSTR(R0,3,2),MX_MRK),NVL(SUBSTR(R0,5,2),MX_TRK)),'0') C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R1,1,2),MX_DRK),
       -- '01',NVL(SUBSTR(R1,3,2),MX_MRK),NVL(SUBSTR(R1,5,2),MX_TRK)),'0') C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R2,1,2),MX_DRK),
       --- '01',NVL(SUBSTR(R2,3,2),MX_MRK),NVL(SUBSTR(R2,5,2),MX_TRK)),'0') C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R3,1,2),MX_DRK),
      --  '01',NVL(SUBSTR(R3,3,2),MX_MRK),NVL(SUBSTR(R3,5,2),MX_TRK)),'0') C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R4,1,2),MX_DRK),
       -- '01',NVL(SUBSTR(R4,3,2),MX_MRK),NVL(SUBSTR(R4,5,2),MX_TRK)),'0') C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R5,1,2),MX_DRK),
      --  '01',NVL(SUBSTR(R5,3,2),MX_MRK),NVL(SUBSTR(R5,5,2),MX_TRK)),'0') C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R6,1,2),MX_DRK),
       -- '01',NVL(SUBSTR(R6,3,2),MX_MRK),NVL(SUBSTR(R6,5,2),MX_TRK)),'0') C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
      --  ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R7,1,2),MX_DRK),
       -- '01',NVL(SUBSTR(R7,3,2),MX_MRK),NVL(SUBSTR(R7,5,2),MX_TRK)),'0') C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R8,1,2),MX_DRK),
       -- '01',NVL(SUBSTR(R8,3,2),MX_MRK),NVL(SUBSTR(R8,5,2),MX_TRK)),'0') C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
       -- ||LTRIM(DECODE(GR,'00',NVL(SUBSTR(R9,1,2),MX_DRK),
       -- '01',NVL(SUBSTR(R9,3,2),MX_MRK),NVL(SUBSTR(R9,5,2),MX_TRK)),'0') C9
      ,TOT
FROM (
  SELECT DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
           ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
        ,MIN(DECODE(PROD_ID,'100000',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R0
        ,MIN(DECODE(PROD_ID,'100001',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R1
        ,MIN(DECODE(PROD_ID,'100002',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R2
        ,MIN(DECODE(PROD_ID,'100003',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R3
        ,MIN(DECODE(PROD_ID,'100004',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R4
        ,MIN(DECODE(PROD_ID,'100005',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R5
        ,MIN(DECODE(PROD_ID,'100006',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R6
        ,MIN(DECODE(PROD_ID,'100007',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R7
        ,MIN(DECODE(PROD_ID,'100008',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R8
        ,MIN(DECODE(PROD_ID,'100009',LPAD(RK,2,'0')||LPAD(RK,2,'0')||LPAD(RK,2,'0'))) R9
        ,MAX(RK) + 1 MX_DRK
        ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)GR
        ,SUM(SALE_CNT)    TOT         
  FROM (
     SELECT AREA_CD
            ,REGION_AREA
            ,PROD_ID        
            ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK 
            ,SUM(SALE_CNT) SALE_CNT
            ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
      FROM SALE_TBL
          GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
      HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111'  
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
  GROUP BY PROD_ID,  AREA_CD ,REGION_AREA
) WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;




 
SELECT  
       CD_NM
      ,REGION_AREA      
	  ,MIN(C0) C0
      ,MIN(C1) C1
      ,MIN(C2) C2
      ,MIN(C3) C3
      ,MIN(C4) C4
      ,MIN(C5) C5
      ,MIN(C6) C6
      ,MIN(C7) C7
      ,MIN(C8) C8
      ,MIN(C9) C9   
   
  FROM (
         SELECT 
                AREA_CD
                ,REGION_AREA
                ,DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) , '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM  
                ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) RK                               
                ,MAX(SALE_CNT) SALE_CNT
                ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
                ,PROD_ID 
                    ,SUM(NVL(DECODE(PROD_ID,'100000',SALE_CNT),0)) C0
                    ,SUM(NVL(DECODE(PROD_ID,'100001',SALE_CNT),0)) C1
                    ,SUM(NVL(DECODE(PROD_ID,'100002',SALE_CNT),0)) C2
                    ,SUM(NVL(DECODE(PROD_ID,'100003',SALE_CNT),0)) C3
                    ,SUM(NVL(DECODE(PROD_ID,'100004',SALE_CNT),0)) C4
                    ,SUM(NVL(DECODE(PROD_ID,'100005',SALE_CNT),0)) C5
                    ,SUM(NVL(DECODE(PROD_ID,'100006',SALE_CNT),0)) C6
                    ,SUM(NVL(DECODE(PROD_ID,'100007',SALE_CNT),0)) C7
                    ,SUM(NVL(DECODE(PROD_ID,'100008',SALE_CNT),0)) C8
                    ,SUM(NVL(DECODE(PROD_ID,'100009',SALE_CNT),0)) C9
                    ,SUM(SALE_CNT) SALE_CNT
                
                FROM SALE_TBL   
          ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
          GROUP BY  ROLLUP (PROD_ID, AREA_CD, REGION_AREA)
          HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111'         
  )
GROUP BY AREA_CD ,REGION_AREA
;
  
  
-- NOW
SELECT CD_NM
      ,REGION_AREA
      ,C0
        ||'('||TO_CHAR(ROUND(C0*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C0,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C0,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R0 C0
      ,C1
        ||'('||TO_CHAR(ROUND(C1*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C1,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C1,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R1 C1
      ,C2
        ||'('||TO_CHAR(ROUND(C2*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C2,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C2,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R2 C2
      ,C3
        ||'('||TO_CHAR(ROUND(C3*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C3,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C3,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R3 C3
      ,C4
        ||'('||TO_CHAR(ROUND(C4*100/TOT,1),'FM990.0')||'%)'
        ||DECODE(C4,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C4,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R4 C4
      ,C5
        ||'('||TO_CHAR(ROUND(C5*100/TOT,1),'FM990.0')||'%)' 
        ||DECODE(C5,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C5,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R5 C5
      ,C6
        ||'('||TO_CHAR(ROUND(C6*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C6,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C6,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R6 C6
      ,C7
        ||'('||TO_CHAR(ROUND(C7*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C7,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C7,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R7 C7
      ,C8
        ||'('||TO_CHAR(ROUND(C8*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C8,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C8,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R8 C8
      ,C9
        ||'('||TO_CHAR(ROUND(C9*100/TOT,1),'FM990.0')||'%) '
        ||DECODE(C9,GREATEST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▲')
        ||DECODE(C9,LEAST(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9),'▼')||' *'
        ||R9 C9
      ,TOT
FROM (

  SELECT DECODE(GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) ,'000' ,MIN(CD_NM) ,'001' ,MIN(CD_NM)||'합계' ,'011', '총합') CD_NM
        ,AREA_CD
        ,REGION_AREA      
        
	    ,SUM(NVL(DECODE(PROD_ID,'100000',SALE_CNT),0)) C0
        ,SUM(NVL(DECODE(PROD_ID,'100001',SALE_CNT),0)) C1
        ,SUM(NVL(DECODE(PROD_ID,'100002',SALE_CNT),0)) C2
        ,SUM(NVL(DECODE(PROD_ID,'100003',SALE_CNT),0)) C3
        ,SUM(NVL(DECODE(PROD_ID,'100004',SALE_CNT),0)) C4
        ,SUM(NVL(DECODE(PROD_ID,'100005',SALE_CNT),0)) C5
        ,SUM(NVL(DECODE(PROD_ID,'100006',SALE_CNT),0)) C6
        ,SUM(NVL(DECODE(PROD_ID,'100007',SALE_CNT),0)) C7
        ,SUM(NVL(DECODE(PROD_ID,'100008',SALE_CNT),0)) C8
        ,SUM(NVL(DECODE(PROD_ID,'100009',SALE_CNT),0)) C9

        ,MIN(DECODE(PROD_ID,'100000',D_RK)) R0
        ,MIN(DECODE(PROD_ID,'100001',D_RK)) R1
        ,MIN(DECODE(PROD_ID,'100002',D_RK)) R2
        ,MIN(DECODE(PROD_ID,'100003',D_RK)) R3
        ,MIN(DECODE(PROD_ID,'100004',D_RK)) R4
        ,MIN(DECODE(PROD_ID,'100005',D_RK)) R5
        ,MIN(DECODE(PROD_ID,'100006',D_RK)) R6
        ,MIN(DECODE(PROD_ID,'100007',D_RK)) R7
        ,MIN(DECODE(PROD_ID,'100008',D_RK)) R8
        ,MIN(DECODE(PROD_ID,'100009',D_RK)) R9 
        ,MAX(D_RK) + 1 MX_DRK
        ,MAX(SALE_CNT)  TOT  
        ,GR
  FROM (
  
    SELECT AREA_CD
            ,REGION_AREA
            ,PROD_ID        
            ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) D_RK 
            ,SUM(SALE_CNT) SALE_CNT
            ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
      FROM SALE_TBL
      GROUP BY ROLLUP(PROD_ID, AREA_CD ,REGION_AREA)
      HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111'  
      
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
  GROUP BY PROD_ID,CD_NM ,REGION_AREA
)
WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;




--------- Z
SELECT CD_NM
      ,REGION_AREA

      ,SUM(C0)||'('||TO_CHAR(ROUND(MIN(C0)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R0), MIN(MIN_DRK),'▲')||DECODE(MAX(R0),MAX(MX_DRK),'▼')|| ' *'||MAX(R0) C0
	  ,SUM(C1)||'('||TO_CHAR(ROUND(MIN(C1)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R1), MIN(MIN_DRK),'▲')||DECODE(MAX(R1),MAX(MX_DRK),'▼')|| ' *'||MAX(R1) C1
	  ,SUM(C2)||'('||TO_CHAR(ROUND(MIN(C2)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R2), MIN(MIN_DRK),'▲')||DECODE(MAX(R2),MAX(MX_DRK),'▼')|| ' *'||MAX(R2) C2
	  ,SUM(C3)||'('||TO_CHAR(ROUND(MIN(C3)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R3), MIN(MIN_DRK),'▲')||DECODE(MAX(R3),MAX(MX_DRK),'▼')|| ' *'||MAX(R3) C3
	  ,SUM(C4)||'('||TO_CHAR(ROUND(MIN(C4)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R4), MIN(MIN_DRK),'▲')||DECODE(MAX(R4),MAX(MX_DRK),'▼')|| ' *'||MAX(R4) C4
	  ,SUM(C5)||'('||TO_CHAR(ROUND(MIN(C5)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R5), MIN(MIN_DRK),'▲')||DECODE(MAX(R5),MAX(MX_DRK),'▼')|| ' *'||MAX(R5) C5
	  ,SUM(C6)||'('||TO_CHAR(ROUND(MIN(C6)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R6), MIN(MIN_DRK),'▲')||DECODE(MAX(R6),MAX(MX_DRK),'▼')|| ' *'||MAX(R6) C6
	  ,SUM(C7)||'('||TO_CHAR(ROUND(MIN(C7)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R7), MIN(MIN_DRK),'▲')||DECODE(MAX(R7),MAX(MX_DRK),'▼')|| ' *'||MAX(R7) C7
	  ,SUM(C8)||'('||TO_CHAR(ROUND(MIN(C8)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R8), MIN(MIN_DRK),'▲')||DECODE(MAX(R8),MAX(MX_DRK),'▼')|| ' *'||MAX(R8) C8
	  ,SUM(C9)||'('||TO_CHAR(ROUND(MIN(C9)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R9), MIN(MIN_DRK),'▲')||DECODE(MAX(R9),MAX(MX_DRK),'▼')|| ' *'||MAX(R9) C9



--	  ,SUM(C0)||'('||TO_CHAR(ROUND(MIN(C0)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R0), MIN(MIN_DRK),'▲')||DECODE(MAX(R0),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R0),NULL,MAX(R0)))+1 C0
--	  ,SUM(C1)||'('||TO_CHAR(ROUND(MIN(C1)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R1), MIN(MIN_DRK),'▲')||DECODE(MAX(R1),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R1),NULL,MAX(R1)))+1 C1
--	  ,SUM(C2)||'('||TO_CHAR(ROUND(MIN(C2)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R2), MIN(MIN_DRK),'▲')||DECODE(MAX(R2),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R2),NULL,MAX(R2)))+1 C2
--	  ,SUM(C3)||'('||TO_CHAR(ROUND(MIN(C3)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R3), MIN(MIN_DRK),'▲')||DECODE(MAX(R3),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R3),NULL,MAX(R3)))+1 C3
--	  ,SUM(C4)||'('||TO_CHAR(ROUND(MIN(C4)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R4), MIN(MIN_DRK),'▲')||DECODE(MAX(R4),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R4),NULL,MAX(R4)))+1 C4
--	  ,SUM(C5)||'('||TO_CHAR(ROUND(MIN(C5)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R5), MIN(MIN_DRK),'▲')||DECODE(MAX(R5),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R5),NULL,MAX(R5)))+1 C5
--	  ,SUM(C6)||'('||TO_CHAR(ROUND(MIN(C6)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R6), MIN(MIN_DRK),'▲')||DECODE(MAX(R6),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R6),NULL,MAX(R6)))+1 C6
--	  ,SUM(C7)||'('||TO_CHAR(ROUND(MIN(C7)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R7), MIN(MIN_DRK),'▲')||DECODE(MAX(R7),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R7),NULL,MAX(R7)))+1 C7
--	  ,SUM(C8)||'('||TO_CHAR(ROUND(MIN(C8)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R8), MIN(MIN_DRK),'▲')||DECODE(MAX(R8),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R8),NULL,MAX(R8)))+1 C8
--	  ,SUM(C9)||'('||TO_CHAR(ROUND(MIN(C9)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R9), MIN(MIN_DRK),'▲')||DECODE(MAX(R9),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R9),NULL,MAX(R9)))+1 C9
    ,SUM(TOT)



FROM (
  SELECT DECODE(GR,
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
           ,AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
	    ,MIN(DECODE(PROD_ID,'100000',D_RK)) R0
        ,MIN(DECODE(PROD_ID,'100001',D_RK)) R1
        ,MIN(DECODE(PROD_ID,'100002',D_RK)) R2
        ,MIN(DECODE(PROD_ID,'100003',D_RK)) R3
        ,MIN(DECODE(PROD_ID,'100004',D_RK)) R4
        ,MIN(DECODE(PROD_ID,'100005',D_RK)) R5
        ,MIN(DECODE(PROD_ID,'100006',D_RK)) R6
        ,MIN(DECODE(PROD_ID,'100007',D_RK)) R7
        ,MIN(DECODE(PROD_ID,'100008',D_RK)) R8
        ,MIN(DECODE(PROD_ID,'100009',D_RK)) R9
        --,MAX(D_RK) + 1 MX_DRK_Z
        ,MAX(D_RK) MX_DRK
        ,MIN(D_RK) MIN_DRK
        ,SUM(SALE_CNT)    TOT         
  FROM (
      SELECT AREA_CD
            ,REGION_AREA
            ,PROD_ID        
            ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) D_RK 
            ,SUM(SALE_CNT) SALE_CNT
            ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
      FROM SALE_TBL
      GROUP BY ROLLUP (PROD_ID,AREA_CD,REGION_AREA)
      HAVING GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA)  <>'111' 
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID
  AND   LENGTH(B.CD_ID) =2
  GROUP BY AREA_CD, REGION_AREA, GR
   
) GROUP BY CD_NM
      ,REGION_AREA
  ORDER BY CD_NM
      ,REGION_AREA;



WHERE GR = DECODE(:ARG_GR,'D','000','M','001','T','011',GR) 
ORDER BY DECODE(AREA_CD,'10',:ARG10
          ,'20',:ARG20
          ,'30',:ARG30
          ,'40',:ARG40
          ,'50',:ARG50
          ,'60',:ARG60
          ,'70',:ARG70
          ,'80',:ARG80
          ,'90',:ARG90 )
          ,DECODE(:ARG_DIR,'F',1,-1) * GR;
  

  
  GROUP BY GROUPING SETS((AREA_CD,REGION_AREA,PROD_ID),(AREA_CD,PROD_ID),(PROD_ID));
  

-------
SELECT min(CD_NM)
      ,REGION_AREA

      ,SUM(C0)||'('||TO_CHAR(ROUND(MIN(C0)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R0), MIN(MIN_DRK),'▲')||DECODE(MAX(R0),MAX(MX_DRK),'▼')|| ' *'||MAX(R0) C0
	  ,SUM(C1)||'('||TO_CHAR(ROUND(MIN(C1)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R1), MIN(MIN_DRK),'▲')||DECODE(MAX(R1),MAX(MX_DRK),'▼')|| ' *'||MAX(R1) C1
	  ,SUM(C2)||'('||TO_CHAR(ROUND(MIN(C2)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R2), MIN(MIN_DRK),'▲')||DECODE(MAX(R2),MAX(MX_DRK),'▼')|| ' *'||MAX(R2) C2
	  ,SUM(C3)||'('||TO_CHAR(ROUND(MIN(C3)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R3), MIN(MIN_DRK),'▲')||DECODE(MAX(R3),MAX(MX_DRK),'▼')|| ' *'||MAX(R3) C3
	  ,SUM(C4)||'('||TO_CHAR(ROUND(MIN(C4)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R4), MIN(MIN_DRK),'▲')||DECODE(MAX(R4),MAX(MX_DRK),'▼')|| ' *'||MAX(R4) C4
	  ,SUM(C5)||'('||TO_CHAR(ROUND(MIN(C5)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R5), MIN(MIN_DRK),'▲')||DECODE(MAX(R5),MAX(MX_DRK),'▼')|| ' *'||MAX(R5) C5
	  ,SUM(C6)||'('||TO_CHAR(ROUND(MIN(C6)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R6), MIN(MIN_DRK),'▲')||DECODE(MAX(R6),MAX(MX_DRK),'▼')|| ' *'||MAX(R6) C6
	  ,SUM(C7)||'('||TO_CHAR(ROUND(MIN(C7)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R7), MIN(MIN_DRK),'▲')||DECODE(MAX(R7),MAX(MX_DRK),'▼')|| ' *'||MAX(R7) C7
	  ,SUM(C8)||'('||TO_CHAR(ROUND(MIN(C8)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R8), MIN(MIN_DRK),'▲')||DECODE(MAX(R8),MAX(MX_DRK),'▼')|| ' *'||MAX(R8) C8
	  ,SUM(C9)||'('||TO_CHAR(ROUND(MIN(C9)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R9), MIN(MIN_DRK),'▲')||DECODE(MAX(R9),MAX(MX_DRK),'▼')|| ' *'||MAX(R9) C9



--	  ,SUM(C0)||'('||TO_CHAR(ROUND(MIN(C0)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R0), MIN(MIN_DRK),'▲')||DECODE(MAX(R0),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R0),NULL,MAX(R0)))+1 C0
--	  ,SUM(C1)||'('||TO_CHAR(ROUND(MIN(C1)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R1), MIN(MIN_DRK),'▲')||DECODE(MAX(R1),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R1),NULL,MAX(R1)))+1 C1
--	  ,SUM(C2)||'('||TO_CHAR(ROUND(MIN(C2)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R2), MIN(MIN_DRK),'▲')||DECODE(MAX(R2),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R2),NULL,MAX(R2)))+1 C2
--	  ,SUM(C3)||'('||TO_CHAR(ROUND(MIN(C3)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R3), MIN(MIN_DRK),'▲')||DECODE(MAX(R3),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R3),NULL,MAX(R3)))+1 C3
--	  ,SUM(C4)||'('||TO_CHAR(ROUND(MIN(C4)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R4), MIN(MIN_DRK),'▲')||DECODE(MAX(R4),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R4),NULL,MAX(R4)))+1 C4
--	  ,SUM(C5)||'('||TO_CHAR(ROUND(MIN(C5)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R5), MIN(MIN_DRK),'▲')||DECODE(MAX(R5),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R5),NULL,MAX(R5)))+1 C5
--	  ,SUM(C6)||'('||TO_CHAR(ROUND(MIN(C6)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R6), MIN(MIN_DRK),'▲')||DECODE(MAX(R6),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R6),NULL,MAX(R6)))+1 C6
--	  ,SUM(C7)||'('||TO_CHAR(ROUND(MIN(C7)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R7), MIN(MIN_DRK),'▲')||DECODE(MAX(R7),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R7),NULL,MAX(R7)))+1 C7
--	  ,SUM(C8)||'('||TO_CHAR(ROUND(MIN(C8)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R8), MIN(MIN_DRK),'▲')||DECODE(MAX(R8),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R8),NULL,MAX(R8)))+1 C8
--	  ,SUM(C9)||'('||TO_CHAR(ROUND(MIN(C9)*100/MIN(TOT),1),'FM990.0')||'%) '  ||DECODE(MIN(R9), MIN(MIN_DRK),'▲')||DECODE(MAX(R9),MAX(MX_DRK),'▼')|| ' *'||   MIN(DECODE(MAX(R9),NULL,MAX(R9)))+1 C9
    ,SUM(TOT)



FROM (
  SELECT DECODE(GR,
          '000',MIN(CD_NM),'001',MIN(CD_NM)||'합계','총합') CD_NM
           ,nvl(AREA_CD,999) AREA_CD
        ,REGION_AREA
        ,NVL(SUM(DECODE(PROD_ID,'100000',SALE_CNT)),0) C0
        ,NVL(SUM(DECODE(PROD_ID,'100001',SALE_CNT)),0) C1
        ,NVL(SUM(DECODE(PROD_ID,'100002',SALE_CNT)),0) C2
        ,NVL(SUM(DECODE(PROD_ID,'100003',SALE_CNT)),0) C3
        ,NVL(SUM(DECODE(PROD_ID,'100004',SALE_CNT)),0) C4
        ,NVL(SUM(DECODE(PROD_ID,'100005',SALE_CNT)),0) C5
        ,NVL(SUM(DECODE(PROD_ID,'100006',SALE_CNT)),0) C6
        ,NVL(SUM(DECODE(PROD_ID,'100007',SALE_CNT)),0) C7
        ,NVL(SUM(DECODE(PROD_ID,'100008',SALE_CNT)),0) C8
        ,NVL(SUM(DECODE(PROD_ID,'100009',SALE_CNT)),0) C9
	    ,MIN(DECODE(PROD_ID,'100000',D_RK)) R0
        ,MIN(DECODE(PROD_ID,'100001',D_RK)) R1
        ,MIN(DECODE(PROD_ID,'100002',D_RK)) R2
        ,MIN(DECODE(PROD_ID,'100003',D_RK)) R3
        ,MIN(DECODE(PROD_ID,'100004',D_RK)) R4
        ,MIN(DECODE(PROD_ID,'100005',D_RK)) R5
        ,MIN(DECODE(PROD_ID,'100006',D_RK)) R6
        ,MIN(DECODE(PROD_ID,'100007',D_RK)) R7
        ,MIN(DECODE(PROD_ID,'100008',D_RK)) R8
        ,MIN(DECODE(PROD_ID,'100009',D_RK)) R9
        --,MAX(D_RK) + 1 MX_DRK_Z
        ,MAX(D_RK) MX_DRK
        ,MIN(D_RK) MIN_DRK
        ,SUM(SALE_CNT)    TOT         
  FROM (
      SELECT AREA_CD
            ,REGION_AREA
            ,PROD_ID        
            ,DENSE_RANK() OVER(PARTITION BY AREA_CD,REGION_AREA ORDER BY SUM(SALE_CNT) DESC) D_RK 
            ,SUM(SALE_CNT) SALE_CNT
            ,GROUPING(PROD_ID)||GROUPING(AREA_CD)||GROUPING(REGION_AREA) GR
      FROM SALE_TBL
      GROUP BY GROUPING SETS((AREA_CD,REGION_AREA,PROD_ID),(AREA_CD,PROD_ID),(PROD_ID)) 
  ) A,CD_TBL B
  WHERE A.AREA_CD = B.CD_ID(+)
  AND   LENGTH(B.CD_ID(+)) =2
  GROUP BY AREA_CD, REGION_AREA, GR
   
) GROUP BY AREA_CD
      ,REGION_AREA
  ORDER BY CD_NM
      ,REGION_AREA;
      
      
      
      
SELECT AREA_CD AREACD
        ,REGION_AREA REGIONAREA
        ,PROD_ID PRODID
        ,SUM(SALE_CNT) SALECNT
FROM SALE_TBL
WHERE AREA_CD = '10'
AND ROWNUM = 1
GROUP BY AREA_CD, REGION_AREA, PROD_ID;

SELECT PRODID
      ,PRODNM
      ,SALECNT
FROM MSALES;
    
SELECT PRODID
  ,PRODNM
  ,SALECNT
FROM MSALES
WHERE PRODID = 200;

SELECT PRODID
  ,PRODNM
  ,SALECNT
FROM MSALES
WHERE PRODID like 20||'%'
AND PRODNM like '건조기'||'%';
      
      
      
      
      
SELECT COUNT(*) DT
FROM DUAL;


SELECT COUNT(*) CNT
FROM EXAM_RSLT;
    
SELECT SYSDATE UTILCURRENTDATE
  ,SYSDATE SQLCURRENTDATE
  ,SYSDATE SQLCURRENTTIMESTAMP
  ,TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') CURRENTSTRDATE
  ,SYSTIMESTAMP SQLDBCURRENTTIMESTAMP
FROM DUAL;

SELECT SYSDATE LOCALDATE
  ,SYSTIMESTAMP SQLDBCURRENTTIMESTAMP
FROM DUAL;
    
SELECT SYSDATE LOCALDATE
      ,SYSTIMESTAMP SQLDBCURRENTTIMESTAMP
FROM DUAL;



SELECT ALBUM_ID
      ,SONG_NAME
      ,PLAY_TIME
FROM SONG
WHERE ALBUM_ID = 'BS2';
    
SELECT MST_ID
      ,MST_NAME
      ,DEBUT_DATE
FROM ARTIST
WHERE MST_ID = 'BTS';
    
SELECT ALBUM_ID
      ,MST_ID
      ,ALBUM_SEQ
      ,ALBUM_TITLE
      ,OPEN_DATE
FROM ALBUM
WHERE ALBUM_ID = 'BS1';
    
SELECT ALBUM_ID
     ,SONG_NAME
     ,PLAY_TIME
FROM SONG
WHERE ALBUM_ID = #{album_id, jdbcType=VARCHA;
    
    
SELECT *
FROM ARTIST;


SELECT MST_ID, ALBUM_TITLE
FROM ALBUM
WHERE MST_ID = 'BTS';
   
   
SELECT ALBUM.MST_ID
        ,ALBUM.ALBUM_TITLE
FROM ALBUM INNER JOIN ARTIST ON ALBUM.MST_ID = ARTIST.MST_ID
WHERE ALBUM.MST_ID = 'BTS';
  
  

SELECT *
FROM titles INNER JOIN sales
ON titles.title_id = sales.title_id;
        
        
        
        
        
SELECT A.MST_ID 	MST_ID
      ,A.MST_NAME 	MST_NAME
      ,A.DEBUT_DATE 	DEBUT_DATE
      ,B.ALBUM_ID 	ALBUM_ID
      ,B.ALBUM_SEQ 	ALBUM_SEQ
      ,B.ALBUM_TITLE 	ALBUM_TITLE
      ,B.OPEN_DATE 	OPEN_DATE
FROM ARTIST A, ALBUM B
WHERE A.MST_ID = B.MST_ID
AND B.MST_ID = 'BTS';
        
        
SELECT A.MST_ID
    ,A.MST_NAME
    ,A.DEBUT_DATE
    ,B.ALBUM_ID
    ,B.ALBUM_SEQ
    ,B.ALBUM_TITLE
    ,B.OPEN_DATE
    ,C.SONG_NAME
    ,C.PLAY_TIME
FROM ARTIST A, ALBUM B, SONG C
WHERE A.MST_ID = B.MST_ID
AND B.ALBUM_ID = C.ALBUM_ID
AND B.ALBUM_ID = 'BS1';
        
        
SELECT A.MST_ID 	MST_ID
    ,A.MST_NAME 	MST_NAME
    ,A.DEBUT_DATE 	DEBUT_DATE
    ,B.ALBUM_ID 	ALBUM_ID
    ,B.ALBUM_SEQ 	ALBUM_SEQ
    ,B.ALBUM_TITLE 	ALBUM_TITLE
    ,B.OPEN_DATE 	OPEN_DATE
FROM ARTIST A, ALBUM B
WHERE A.MST_ID = B.MST_ID
AND B.MST_ID = 'BTS';
        
        
SELECT A.MST_ID 	MST_ID
    ,A.MST_NAME 	MST_NAME
    ,A.DEBUT_DATE 	DEBUT_DATE
    ,B.ALBUM_ID 	ALBUM_ID
    ,B.ALBUM_SEQ 	ALBUM_SEQ
    ,B.ALBUM_TITLE 	ALBUM_TITLE
    ,B.OPEN_DATE 	OPEN_DATE
FROM ARTIST A, ALBUM B
WHERE A.MST_ID = B.MST_ID
AND B.MST_ID = 'BTS';
        
SELECT A.ALBUM_ID 	ALBUM_ID
    ,A.MST_ID 	MST_ID
    ,A.ALBUM_SEQ 	ALBUM_SEQ
    ,A.OPEN_DATE 	OPEN_DATE
    ,B.SONG_NAME    SONG_NAME
    ,B.PLAY_TIME    PLAY_TIME
FROM ALBUM A, SONG B
WHERE A.ALBUM_ID = B.ALBUM_ID
AND A.ALBUM_ID = 'BS1';
        
SELECT A.MST_ID 	MST_ID
    ,A.MST_NAME 	MST_NAME
    ,A.DEBUT_DATE 	DEBUT_DATE
    ,B.ALBUM_ID 	ALBUM_ID
    ,B.ALBUM_SEQ 	ALBUM_SEQ
    ,B.ALBUM_TITLE 	ALBUM_TITLE
    ,B.OPEN_DATE 	OPEN_DATE
FROM ARTIST A, ALBUM B
WHERE A.MST_ID = B.MST_ID
AND B.MST_ID = 'BTS';

insert into msales(prodid, prodnm, salecnt)
values (:prodid, :prodnm, :salecnt);
        
SELECT * FROM MSALES;
            
            
            
 UPDATE MSALES set
        PRODNM = :prodnm,
        SAlECNT = :salecnt
WHERE PRODID = '621';
    
INSERT INTO MSALES
SELECT *
FROM MSALES A, (SELECT ROWNUM NO 
FROM DUAL CONNECT BY LEVEL <=3)
    
delete from MSALES;


-------- 3/25 계층형 쿼리
-- 암기
--START WITH => 시작하는 row
--CONNECT BY => 전개하다
--PRIOR => 먼저 읽은 컬럼

-- TREE VS GRAPH : 사이클 여부

SELECT *
FROM HIR_TST;

CONNECT BY PRIOR DGT = PDGT
START WITH DGT = 1;

-- 부모에서 자식으로 전개
SELECT DGT, SYS_CONNECT_BY_PATH(DGT, '=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||DGT
FROM HIR_TST
CONNECT BY PRIOR DGT = PDGT
START WITH DGT = 1;

-- 자식에서 부모로 전개
SELECT DGT, SYS_CONNECT_BY_PATH(DGT, '=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||DGT
FROM HIR_TST
CONNECT BY DGT = PRIOR PDGT
START WITH DGT = 6;

-- SYS_CONNECT_BY_PATH : CONNECT BY가 있는 문장에서만 사용할 수 있다. 

-- IN(5,6) 5로 한 번, 6으로 한 번 전개하라
SELECT DGT, SYS_CONNECT_BY_PATH(DGT, '=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||DGT
FROM HIR_TST
CONNECT BY DGT = PRIOR PDGT
START WITH DGT IN(5,6);

-- CTAS : CREATE TABLE TABLE명 AS SELECT
CREATE TABLE HIR_TST2 AS 

SELECT * 
FROM HIR_TST;

INSERT INTO HIR_TST2
SELECT 10,11 FROM DUAL;

SELECT *
FROM HIR_TST2;

-- 오류나는 버젼
SELECT DGT, SYS_CONNECT_BY_PATH(DGT, '=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||DGT
FROM HIR_TST2
CONNECT BY PRIOR DGT = PDGT
START WITH DGT = 1;

-- 오류 검출하는 코드 :CONNECT_BY_ISCYCLE CYC / NOCYCLE
SELECT DGT, SYS_CONNECT_BY_PATH(DGT, '=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||DGT
    ,CONNECT_BY_ISCYCLE CYC
FROM HIR_TST2
CONNECT BY NOCYCLE PRIOR DGT = PDGT
START WITH DGT = 1;

    
    
    

SELECT S_VAL, E_VAL, MAX(LTRIM(SYS_CONNECT_BY_PATH(NID, '+'),'+')), SUM(NID)
FROM(
SELECT :S_VAL +ROWNUM -1 NID
    ,:S_VAL + ROWNUM P_NID
    ,:S_VAL S_VAL
    ,:E_VAL E_VAL
FROM DUAL
CONNECT BY LEVEL <= :E_VAL - :S_VAL + 1
)
GROUP BY S_VAL, E_VAL
CONNECT BY PRIOR NID = P_NID
START WITH NID = :E_VAL;

DECODE(:INDI, 'F', :S_VAL, 'R', :E_VAL)


-- 숙제
SELECT S_VAL, E_VAL, MAX(LTRIM(SYS_CONNECT_BY_PATH(NID, '+'),'+')), SUM(NID)
FROM(
SELECT :S_VAL +ROWNUM -1 NID
    ,:S_VAL + ROWNUM P_NID
    ,:S_VAL S_VAL
    ,:E_VAL E_VAL
FROM DUAL
CONNECT BY LEVEL <= :E_VAL - :S_VAL + 1
)
GROUP BY S_VAL, E_VAL
CONNECT BY DECODE(:INDI, 'F', NID, 'R', PRIOR NID) = DECODE(:INDI, 'F', PRIOR P_NID, 'R', P_NID)
START WITH NID = DECODE(:INDI, 'F', :S_VAL, 'R', :E_VAL);


CREATE VIEW V_YYW_20220328_HW1 AS
SELECT *
FROM DUAL
/* SELECT S_VAL, E_VAL, MAX(LTRIM(SYS_CONNECT_BY_PATH(NID, '+'),'+')), SUM(NID)
FROM(
SELECT :S_VAL +ROWNUM -1 NID
    ,:S_VAL + ROWNUM P_NID
    ,:S_VAL S_VAL
    ,:E_VAL E_VAL
FROM DUAL
CONNECT BY LEVEL <= :E_VAL - :S_VAL + 1
)
GROUP BY S_VAL, E_VAL
CONNECT BY DECODE(:INDI, 'F', NID, 'R', PRIOR NID) = DECODE(:INDI, 'F', PRIOR P_NID, 'R', P_NID)
START WITH NID = DECODE(:INDI, 'F', :S_VAL, 'R', :E_VAL);*/;


CREATE TABLE KKU_HIR( DGT VARCHAR2(100),
PDGT VARCHAR2(100)
);


	  
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('총장', NULL);
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('비서실', '총장');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('교학부총장', '총장');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('대외부총장', '총장');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('GLOBAL 캠퍼스부총장', '총장');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('외무 부총장', '총장');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('대학', '교학부총장');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('대학원', '교학부총장');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('문과대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('이과대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('건축대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('공과대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('사회과학대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('경영대학', '대학');
      
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('부동산과학원', '대학');
      
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('KU융합과학기술원', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('상허생명과학대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('수의과대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('예술디자인대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('사범대학', '대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('국어국문학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('영어영문학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('중어중문학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('철학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('사학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('지리학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('미디어커뮤니케이션학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('문화콘텐츠학','문과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('수학','이과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('물리학','이과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('화학','이과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('건축학','건축대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('사회환경공학부','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('기계항공공학부','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('전기전자공학부','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('화학공학부','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('컴퓨터공학부','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('산업경영공학부','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('생물공학','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('K뷰티산업융합학','공과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('정치외교학','사회과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('경제학','사회과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('행정학','사회과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('국제무역학','사회과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('응용통계학','사회과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('융합인재학','사회과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('글로벌비즈니스학','사회과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('경영학','경영대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('기술경영학','경영대학');
      
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('부동산학','부동산과학원');
     
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('미래에너지공학','KU융합과학기술원');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('스마트운행체공학','KU융합과학기술원');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('스마트ICT융합공학','KU융합과학기술원');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('화장품공학','KU융합과학기술원');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('줄기세포재생공학','KU융합과학기술원');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('의생명공학','KU융합과학기술원');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('특성화학부','KU융합과학기술원');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('생명과학특성학','상허생명과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('동물자원과학','상허생명과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('식량자원과학','상허생명과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('축산식품생명공학','상허생명과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('식품유통공학','상허생명과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('환경보건과학','상허생명과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('산림조경학','상허생명과학대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('수의예(학)','수의과대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('커뮤니케이션디자인학','예술디자인대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('산업디자인학','예술디자인대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('의상디자인학','예술디자인대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('리빙디자인학','예술디자인대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('현대미술학','예술디자인대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('영상영화학','예술디자인대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('일어교육','사범대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('수학교육','사범대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('체육교육','사범대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('음악교육','사범대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('교육공학','사범대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('영어교육','사범대학');
	  INSERT INTO KKU_HIR (DGT, PDGT) VALUES('교직','사범대학');


SELECT DGT, LTRIM(SYS_CONNECT_BY_PATH(DGT, '=>'),'=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||DGT
FROM KKU_HIR
CONNECT BY PRIOR DGT = PDGT
START WITH DGT = '총장';

SELECT *
FROM KKU_HIR
WHERE DGT = '부동산과학원';


SELECT * FROM KKU_HIR WHERE DGT='부동산과학원';

SELECT * FROM KKU_HIR WHERE PDGT='대학';



SELECT*
FROM UNI_CHART;

COMMIT;

SELECT NAME, LTRIM(SYS_CONNECT_BY_PATH(NAME, '=>'),'=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||NAME
FROM UNI_CHART
CONNECT BY PRIOR NUM = P_NUM
START WITH NUM = 1
ORDER SIBLINGS BY P_NUM DESC;


CREATE VIEW V_YYW_20220328_HW3 AS
SELECT *
FROM DUAL
/* SELECT DGT, LTRIM(SYS_CONNECT_BY_PATH(DGT, '=>'),'=>')
    ,LEVEL
    ,LPAD(' ', (LEVEL-1)*5)||'|-'||DGT
FROM KKU_HIR
CONNECT BY PRIOR DGT = PDGT
START WITH DGT = '총장';*/;

INSERT INTO KKU_HIR (DGT, PDGT) VALUES('공과대학', '대학');


UPDATE KKU_HIR SET PDGT = '대학원' WHERE DGT='공과대학';

UPDATE KKU_HIR SET PDGT = '부동산학' WHERE DGT='부동산과학원';

INSERT INTO KKU_HIR (DGT, PDGT) VALUES('부동산과학원','부동산학');


-- 3/28 '권한관리'
SELECT *
FROM T_USER;

INSERT INTO T_USER
VALUES(300,'윤예원', 'S_USER');

SELECT *
FROM AUTH
WHERE AUTH_ID = 'S_USER';

SELECT *
FROM AUTH_MENU;

SELECT MENU_ID
FROM MENU;

SELECT A.MENU_ID,
       A.MENU_NM,
       B.MENU_ID 
FROM MENU A, AUTH_MENU B
WHERE A.MENU_ID = B.MENU_ID(+)
AND B.AUTH_ID(+) = 'N_USER'
AND B.MENU_ID IS NULL;

SELECT *
FROM AUTH_MENU;

SELECT COUNT(*), COUNT(DISTINCT MENU_ID)
FROM MENU;

SELECT *
FROM MENU
CONNECT BY PRIOR MENU_ID = P_MENU_ID
START WITH P_MENU_ID IS NULL;

SELECT COUNT(*)
FROM MENU
CONNECT BY PRIOR MENU_ID = P_MENU_ID
START WITH P_MENU_ID IS NULL;



SELECT TC.NM
      ,TD.AUTH_NM
      ,TA.MENU_ID
      ,DISP_FORMAT||TA.MENU_NM MENU_NM
      ,MENU_TREE
      ,LVL
FROM(
    SELECT MENU_ID
          ,MENU_NM
          ,LEVEL LVL
          ,LPAD(' ',(LEVEL-1)*5)||'|-'||MENU_NM MENU_TREE
FROM MENU
CONNECT BY PRIOR MENU_ID = P_MENU_ID
START WITH P_MENU_ID IS NULL) TA, AUTH_MENU TB, T_USER TC, AUTH TD
WHERE TA.MENU_ID = TB.MENU_ID
  AND TC.AUTH_ID = TD.AUTH_ID
  AND TD.AUTH_ID = TB.AUTH_ID
  -- AND TB.AUTH_ID = 'S_USER'
  AND TC.SABUN = '300';







